
H2OKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083dc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000118  24000000  080086c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a20  24000118  080087dc  00020118  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000b38  080087dc  00020b38  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020146  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012479  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f83  00000000  00000000  00032602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a68  00000000  00000000  00036390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037981  00000000  00000000  00036df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013673  00000000  00000000  0006e779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152473  00000000  00000000  00081dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003814  00000000  00000000  001d4260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001d7a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000118 	.word	0x24000118
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800865c 	.word	0x0800865c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400011c 	.word	0x2400011c
 80002d4:	0800865c 	.word	0x0800865c

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_GPIO_Init+0x74>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <MX_GPIO_Init+0x74>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_GPIO_Init+0x74>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_GPIO_Init+0x74>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <MX_GPIO_Init+0x74>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_GPIO_Init+0x74>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 800032a:	230c      	movs	r3, #12
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0x78>)
 800033e:	f000 fc71 	bl	8000c24 <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	58024400 	.word	0x58024400
 8000350:	58021c00 	.word	0x58021c00

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800035a:	f000 f8e3 	bl	8000524 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fa13 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f831 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f7ff ffb7 	bl	80002d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800036a:	f007 fced 	bl	8007d48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
    uint8_t  buffer[8] = {
 800036e:	4a13      	ldr	r2, [pc, #76]	; (80003bc <main+0x68>)
 8000370:	463b      	mov	r3, r7
 8000372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000376:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(HAL_GPIO_ReadPin(KEY_0_GPIO_Port,KEY_0_Pin) == 1)
 800037a:	2108      	movs	r1, #8
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <main+0x6c>)
 800037e:	f000 fe01 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d102      	bne.n	800038e <main+0x3a>
      {
          buffer[2] = 0x04; // a
 8000388:	2304      	movs	r3, #4
 800038a:	70bb      	strb	r3, [r7, #2]
 800038c:	e00b      	b.n	80003a6 <main+0x52>
      }
      else if(HAL_GPIO_ReadPin(KEY_1_GPIO_Port,KEY_1_Pin) == 1)
 800038e:	2104      	movs	r1, #4
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <main+0x6c>)
 8000392:	f000 fdf7 	bl	8000f84 <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d102      	bne.n	80003a2 <main+0x4e>
      {
          buffer[2] = 0x05;
 800039c:	2305      	movs	r3, #5
 800039e:	70bb      	strb	r3, [r7, #2]
 80003a0:	e001      	b.n	80003a6 <main+0x52>
      }
      else
      {
          buffer[2] = 0x00; // do nothing
 80003a2:	2300      	movs	r3, #0
 80003a4:	70bb      	strb	r3, [r7, #2]
      }

      while(USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8));
 80003a6:	bf00      	nop
 80003a8:	463b      	mov	r3, r7
 80003aa:	2208      	movs	r2, #8
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <main+0x70>)
 80003b0:	f006 f920 	bl	80065f4 <USBD_HID_SendReport>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1f6      	bne.n	80003a8 <main+0x54>
      if(HAL_GPIO_ReadPin(KEY_0_GPIO_Port,KEY_0_Pin) == 1)
 80003ba:	e7de      	b.n	800037a <main+0x26>
 80003bc:	08008674 	.word	0x08008674
 80003c0:	58021c00 	.word	0x58021c00
 80003c4:	2400013c 	.word	0x2400013c

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09e      	sub	sp, #120	; 0x78
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003d2:	224c      	movs	r2, #76	; 0x4c
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f008 f914 	bl	8008604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	2220      	movs	r2, #32
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f008 f90d 	bl	8008604 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ea:	2002      	movs	r0, #2
 80003ec:	f002 f884 	bl	80024f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <SystemClock_Config+0x150>)
 80003f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f8:	4a47      	ldr	r2, [pc, #284]	; (8000518 <SystemClock_Config+0x150>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <SystemClock_Config+0x150>)
 8000402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	4b44      	ldr	r3, [pc, #272]	; (800051c <SystemClock_Config+0x154>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a43      	ldr	r2, [pc, #268]	; (800051c <SystemClock_Config+0x154>)
 8000410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b41      	ldr	r3, [pc, #260]	; (800051c <SystemClock_Config+0x154>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000422:	bf00      	nop
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <SystemClock_Config+0x154>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800042c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000430:	d1f8      	bne.n	8000424 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000432:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <SystemClock_Config+0x158>)
 8000434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <SystemClock_Config+0x158>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000442:	4b37      	ldr	r3, [pc, #220]	; (8000520 <SystemClock_Config+0x158>)
 8000444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000448:	f003 0302 	and.w	r3, r3, #2
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000450:	2300      	movs	r3, #0
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	4b31      	ldr	r3, [pc, #196]	; (800051c <SystemClock_Config+0x154>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a30      	ldr	r2, [pc, #192]	; (800051c <SystemClock_Config+0x154>)
 800045a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <SystemClock_Config+0x154>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <SystemClock_Config+0x150>)
 800046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046e:	4a2a      	ldr	r2, [pc, #168]	; (8000518 <SystemClock_Config+0x150>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <SystemClock_Config+0x150>)
 8000478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000482:	bf00      	nop
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <SystemClock_Config+0x154>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000490:	d1f8      	bne.n	8000484 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000492:	2301      	movs	r3, #1
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049c:	2302      	movs	r3, #2
 800049e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a0:	2302      	movs	r3, #2
 80004a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004a4:	2305      	movs	r3, #5
 80004a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80004a8:	23c0      	movs	r3, #192	; 0xc0
 80004aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 16;
 80004b0:	2310      	movs	r3, #16
 80004b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004b4:	2302      	movs	r3, #2
 80004b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004b8:	2308      	movs	r3, #8
 80004ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004bc:	2300      	movs	r3, #0
 80004be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 f85f 	bl	800258c <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80004d4:	f000 f852 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	233f      	movs	r3, #63	; 0x3f
 80004da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004dc:	2303      	movs	r3, #3
 80004de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004e4:	2308      	movs	r3, #8
 80004e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ec:	2340      	movs	r3, #64	; 0x40
 80004ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2104      	movs	r1, #4
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fc9d 	bl	8002e40 <HAL_RCC_ClockConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800050c:	f000 f836 	bl	800057c <Error_Handler>
  }
}
 8000510:	bf00      	nop
 8000512:	3778      	adds	r7, #120	; 0x78
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	58000400 	.word	0x58000400
 800051c:	58024800 	.word	0x58024800
 8000520:	58024400 	.word	0x58024400

08000524 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000536:	f000 faf9 	bl	8000b2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800053a:	2301      	movs	r3, #1
 800053c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800053e:	2300      	movs	r3, #0
 8000540:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000546:	231f      	movs	r3, #31
 8000548:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800054a:	2387      	movs	r3, #135	; 0x87
 800054c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800054e:	2300      	movs	r3, #0
 8000550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000552:	2300      	movs	r3, #0
 8000554:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800055a:	2301      	movs	r3, #1
 800055c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000566:	463b      	mov	r3, r7
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fb17 	bl	8000b9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800056e:	2004      	movs	r0, #4
 8000570:	f000 faf4 	bl	8000b5c <HAL_MPU_Enable>

}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x30>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x30>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x30>)
 80005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	58024400 	.word	0x58024400

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f930 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <OTG_FS_IRQHandler+0x10>)
 8000616:	f000 fe26 	bl	8001266 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	24000618 	.word	0x24000618

08000624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <SystemInit+0xe4>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062e:	4a36      	ldr	r2, [pc, #216]	; (8000708 <SystemInit+0xe4>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000638:	4b34      	ldr	r3, [pc, #208]	; (800070c <SystemInit+0xe8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	2b06      	cmp	r3, #6
 8000642:	d807      	bhi.n	8000654 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000644:	4b31      	ldr	r3, [pc, #196]	; (800070c <SystemInit+0xe8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f023 030f 	bic.w	r3, r3, #15
 800064c:	4a2f      	ldr	r2, [pc, #188]	; (800070c <SystemInit+0xe8>)
 800064e:	f043 0307 	orr.w	r3, r3, #7
 8000652:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000654:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <SystemInit+0xec>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <SystemInit+0xec>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemInit+0xec>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <SystemInit+0xec>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4929      	ldr	r1, [pc, #164]	; (8000710 <SystemInit+0xec>)
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemInit+0xf0>)
 800066e:	4013      	ands	r3, r2
 8000670:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemInit+0xe8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d007      	beq.n	800068e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemInit+0xe8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemInit+0xe8>)
 8000688:	f043 0307 	orr.w	r3, r3, #7
 800068c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SystemInit+0xec>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemInit+0xec>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SystemInit+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <SystemInit+0xec>)
 80006a2:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <SystemInit+0xf4>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <SystemInit+0xec>)
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <SystemInit+0xf8>)
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <SystemInit+0xec>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <SystemInit+0xfc>)
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <SystemInit+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SystemInit+0xec>)
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <SystemInit+0xfc>)
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <SystemInit+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <SystemInit+0xec>)
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <SystemInit+0xfc>)
 80006c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <SystemInit+0xec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0xec>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <SystemInit+0xec>)
 80006d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <SystemInit+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <SystemInit+0x100>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <SystemInit+0x104>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <SystemInit+0x108>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <SystemInit+0x10c>)
 80006f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	52002000 	.word	0x52002000
 8000710:	58024400 	.word	0x58024400
 8000714:	eaf6ed7f 	.word	0xeaf6ed7f
 8000718:	02020200 	.word	0x02020200
 800071c:	01ff0000 	.word	0x01ff0000
 8000720:	01010280 	.word	0x01010280
 8000724:	5c001000 	.word	0x5c001000
 8000728:	ffff0000 	.word	0xffff0000
 800072c:	51008108 	.word	0x51008108
 8000730:	52004000 	.word	0x52004000

08000734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f7ff ff74 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f007 ff57 	bl	8008614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f7ff fdf5 	bl	8000354 <main>
  bx  lr
 800076a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000774:	24000118 	.word	0x24000118
  ldr r2, =_sidata
 8000778:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 800077c:	24000118 	.word	0x24000118
  ldr r4, =_ebss
 8000780:	24000b38 	.word	0x24000b38

08000784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC3_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078e:	2003      	movs	r0, #3
 8000790:	f000 f98c 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000794:	f002 fd0a 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 8000798:	4602      	mov	r2, r0
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_Init+0x68>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	f003 030f 	and.w	r3, r3, #15
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <HAL_Init+0x6c>)
 80007a6:	5ccb      	ldrb	r3, [r1, r3]
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	fa22 f303 	lsr.w	r3, r2, r3
 80007b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_Init+0x68>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_Init+0x6c>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	fa22 f303 	lsr.w	r3, r2, r3
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_Init+0x70>)
 80007ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_Init+0x74>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f814 	bl	8000800 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e002      	b.n	80007e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007e2:	f7ff fed1 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	58024400 	.word	0x58024400
 80007f4:	080086ac 	.word	0x080086ac
 80007f8:	24000004 	.word	0x24000004
 80007fc:	24000000 	.word	0x24000000

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_InitTick+0x60>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	e021      	b.n	8000858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_InitTick+0x64>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_InitTick+0x60>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f971 	bl	8000b12 <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f93b 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x68>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2400000c 	.word	0x2400000c
 8000864:	24000000 	.word	0x24000000
 8000868:	24000008 	.word	0x24000008

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2400000c 	.word	0x2400000c
 8000890:	24000134 	.word	0x24000134

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	24000134 	.word	0x24000134

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff ffee 	bl	8000894 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffde 	bl	8000894 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2400000c 	.word	0x2400000c

080008f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <HAL_GetREVID+0x14>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	0c1b      	lsrs	r3, r3, #16
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	5c001000 	.word	0x5c001000

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <__NVIC_SetPriorityGrouping+0x40>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	4313      	orrs	r3, r2
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x40>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	05fa0000 	.word	0x05fa0000

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4907      	ldr	r1, [pc, #28]	; (80009a8 <__NVIC_EnableIRQ+0x38>)
 800098a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff8e 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff29 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff40 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff33 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa4 	bl	8000a68 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b30:	f3bf 8f5f 	dmb	sy
}
 8000b34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_MPU_Disable+0x28>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_MPU_Disable+0x28>)
 8000b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b40:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_MPU_Disable+0x2c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	e000ed90 	.word	0xe000ed90

08000b5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_MPU_Enable+0x38>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MPU_Enable+0x3c>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <HAL_MPU_Enable+0x3c>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7a:	f3bf 8f4f 	dsb	sy
}
 8000b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b80:	f3bf 8f6f 	isb	sy
}
 8000b84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed90 	.word	0xe000ed90
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	785a      	ldrb	r2, [r3, #1]
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_MPU_ConfigRegion+0x84>)
 8000baa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d029      	beq.n	8000c08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000bb4:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_MPU_ConfigRegion+0x84>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b1b      	ldrb	r3, [r3, #12]
 8000bc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7adb      	ldrb	r3, [r3, #11]
 8000bc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7a9b      	ldrb	r3, [r3, #10]
 8000bce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7b5b      	ldrb	r3, [r3, #13]
 8000bd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7b9b      	ldrb	r3, [r3, #14]
 8000bde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7bdb      	ldrb	r3, [r3, #15]
 8000be6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7a5b      	ldrb	r3, [r3, #9]
 8000bee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7a1b      	ldrb	r3, [r3, #8]
 8000bf6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bf8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c06:	e005      	b.n	8000c14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_MPU_ConfigRegion+0x84>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_MPU_ConfigRegion+0x84>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed90 	.word	0xe000ed90

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c32:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <HAL_GPIO_Init+0x234>)
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c36:	e194      	b.n	8000f62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8186 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d005      	beq.n	8000c68 <HAL_GPIO_Init+0x44>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d017      	beq.n	8000d06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0203 	and.w	r2, r3, #3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80e0 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_GPIO_Init+0x23c>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_GPIO_Init+0x240>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d052      	beq.n	8000e8c <HAL_GPIO_Init+0x268>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_GPIO_Init+0x244>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d031      	beq.n	8000e52 <HAL_GPIO_Init+0x22e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_GPIO_Init+0x248>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x22a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_GPIO_Init+0x24c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_GPIO_Init+0x250>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x254>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_GPIO_Init+0x258>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x25c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_GPIO_Init+0x260>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_GPIO_Init+0x264>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20e>
 8000e2e:	2309      	movs	r3, #9
 8000e30:	e02d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e32:	230a      	movs	r3, #10
 8000e34:	e02b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e36:	2308      	movs	r3, #8
 8000e38:	e029      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e027      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e025      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e023      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e021      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e01f      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e01d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e01b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e56:	bf00      	nop
 8000e58:	58000080 	.word	0x58000080
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58000400 	.word	0x58000400
 8000e64:	58020000 	.word	0x58020000
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58020800 	.word	0x58020800
 8000e70:	58020c00 	.word	0x58020c00
 8000e74:	58021000 	.word	0x58021000
 8000e78:	58021400 	.word	0x58021400
 8000e7c:	58021800 	.word	0x58021800
 8000e80:	58021c00 	.word	0x58021c00
 8000e84:	58022000 	.word	0x58022000
 8000e88:	58022400 	.word	0x58022400
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9e:	4938      	ldr	r1, [pc, #224]	; (8000f80 <HAL_GPIO_Init+0x35c>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f ae63 	bne.w	8000c38 <HAL_GPIO_Init+0x14>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3724      	adds	r7, #36	; 0x24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58000400 	.word	0x58000400

08000f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b08f      	sub	sp, #60	; 0x3c
 8000fb8:	af0a      	add	r7, sp, #40	; 0x28
 8000fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e116      	b.n	80011f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d106      	bne.n	8000fe6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f006 ffe9 	bl	8007fb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f003 ff0a 	bl	8004e1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	687e      	ldr	r6, [r7, #4]
 8001012:	466d      	mov	r5, sp
 8001014:	f106 0410 	add.w	r4, r6, #16
 8001018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001020:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001024:	e885 0003 	stmia.w	r5, {r0, r1}
 8001028:	1d33      	adds	r3, r6, #4
 800102a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f003 fdd5 	bl	8004bdc <USB_CoreInit>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0d7      	b.n	80011f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fef8 	bl	8004e40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e04a      	b.n	80010ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	333d      	adds	r3, #61	; 0x3d
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	333c      	adds	r3, #60	; 0x3c
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	b298      	uxth	r0, r3
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3356      	adds	r3, #86	; 0x56
 8001092:	4602      	mov	r2, r0
 8001094:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3340      	adds	r3, #64	; 0x40
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	3344      	adds	r3, #68	; 0x44
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	3348      	adds	r3, #72	; 0x48
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	334c      	adds	r3, #76	; 0x4c
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	3301      	adds	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3af      	bcc.n	8001056 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e044      	b.n	8001186 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3b5      	bcc.n	80010fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	687e      	ldr	r6, [r7, #4]
 8001198:	466d      	mov	r5, sp
 800119a:	f106 0410 	add.w	r4, r6, #16
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ae:	1d33      	adds	r3, r6, #4
 80011b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b2:	6838      	ldr	r0, [r7, #0]
 80011b4:	f003 fe90 	bl	8004ed8 <USB_DevInit>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2202      	movs	r2, #2
 80011c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e014      	b.n	80011f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f001 f958 	bl	8002498 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fed2 	bl	8005f96 <USB_DevDisconnect>

  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_PCD_Start+0x1c>
 8001214:	2302      	movs	r3, #2
 8001216:	e022      	b.n	800125e <HAL_PCD_Start+0x62>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fdd9 	bl	8004dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fe80 	bl	8005f54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001266:	b590      	push	{r4, r7, lr}
 8001268:	b08d      	sub	sp, #52	; 0x34
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f004 ff3e 	bl	80060fe <USB_GetMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 84b7 	bne.w	8001bf8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f004 fea2 	bl	8005fd8 <USB_ReadInterrupts>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 84ad 	beq.w	8001bf6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fe8f 	bl	8005fd8 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d107      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f002 0202 	and.w	r2, r2, #2
 80012d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fe7d 	bl	8005fd8 <USB_ReadInterrupts>
 80012de:	4603      	mov	r3, r0
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d161      	bne.n	80013ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0210 	bic.w	r2, r2, #16
 80012f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f003 020f 	and.w	r2, r3, #15
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	0c5b      	lsrs	r3, r3, #17
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	2b02      	cmp	r3, #2
 8001322:	d124      	bne.n	800136e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d035      	beq.n	800139c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800133a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	6a38      	ldr	r0, [r7, #32]
 8001344:	f004 fcb4 	bl	8005cb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001354:	441a      	add	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	441a      	add	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	e016      	b.n	800139c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	0c5b      	lsrs	r3, r3, #17
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	2b06      	cmp	r3, #6
 8001378:	d110      	bne.n	800139c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001380:	2208      	movs	r2, #8
 8001382:	4619      	mov	r1, r3
 8001384:	6a38      	ldr	r0, [r7, #32]
 8001386:	f004 fc93 	bl	8005cb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001396:	441a      	add	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0210 	orr.w	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fe11 	bl	8005fd8 <USB_ReadInterrupts>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013c0:	f040 80a7 	bne.w	8001512 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 fe16 	bl	8005ffe <USB_ReadDevAllOutEpInterrupt>
 80013d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013d4:	e099      	b.n	800150a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 808e 	beq.w	80014fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fe3a 	bl	8006066 <USB_ReadDevOutEPInterrupt>
 80013f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140a:	461a      	mov	r2, r3
 800140c:	2301      	movs	r3, #1
 800140e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 feba 	bl	800218c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	2308      	movs	r3, #8
 8001432:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 ff90 	bl	800235c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001452:	461a      	mov	r2, r3
 8001454:	2310      	movs	r3, #16
 8001456:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d030      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	2b80      	cmp	r3, #128	; 0x80
 800146c:	d109      	bne.n	8001482 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800147c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001480:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	3304      	adds	r3, #4
 8001496:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2200      	movs	r2, #0
 80014a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f006 fea9 	bl	8008204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2302      	movs	r3, #2
 80014c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	2320      	movs	r3, #32
 80014de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	3301      	adds	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f af62 	bne.w	80013d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fd5e 	bl	8005fd8 <USB_ReadInterrupts>
 800151c:	4603      	mov	r3, r0
 800151e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001526:	f040 80db 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fd7f 	bl	8006032 <USB_ReadDevAllInEpInterrupt>
 8001534:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800153a:	e0cd      	b.n	80016d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80c2 	beq.w	80016cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fda5 	bl	80060a2 <USB_ReadDevInEPInterrupt>
 8001558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d057      	beq.n	8001614 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	2201      	movs	r2, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	69f9      	ldr	r1, [r7, #28]
 8001580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001584:	4013      	ands	r3, r2
 8001586:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001594:	461a      	mov	r2, r3
 8001596:	2301      	movs	r3, #1
 8001598:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d132      	bne.n	8001608 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3348      	adds	r3, #72	; 0x48
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3344      	adds	r3, #68	; 0x44
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4419      	add	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4403      	add	r3, r0
 80015d6:	3348      	adds	r3, #72	; 0x48
 80015d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d113      	bne.n	8001608 <HAL_PCD_IRQHandler+0x3a2>
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	334c      	adds	r3, #76	; 0x4c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	f004 fdae 	bl	8006164 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 fd73 	bl	80080fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	2308      	movs	r3, #8
 800162e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001646:	461a      	mov	r2, r3
 8001648:	2310      	movs	r3, #16
 800164a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	015a      	lsls	r2, r3, #5
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001662:	461a      	mov	r2, r3
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d023      	beq.n	80016ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f003 fd8d 	bl	8005194 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3338      	adds	r3, #56	; 0x38
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	3304      	adds	r3, #4
 800168c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	78db      	ldrb	r3, [r3, #3]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f006 fdc0 	bl	8008228 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fcd2 	bl	8002070 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3301      	adds	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f af2e 	bne.w	800153c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fc77 	bl	8005fd8 <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016f4:	d122      	bne.n	800173c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fede 	bl	80024e0 <HAL_PCDEx_LPM_Callback>
 8001724:	e002      	b.n	800172c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f006 fd5e 	bl	80081e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800173a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fc49 	bl	8005fd8 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001750:	d112      	bne.n	8001778 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f006 fd1a 	bl	800819c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001776:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fc2b 	bl	8005fd8 <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800178c:	d121      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800179c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d111      	bne.n	80017cc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	f003 020f 	and.w	r2, r3, #15
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fe8b 	bl	80024e0 <HAL_PCDEx_LPM_Callback>
 80017ca:	e002      	b.n	80017d2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f006 fce5 	bl	800819c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fbfe 	bl	8005fd8 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e6:	f040 80b7 	bne.w	8001958 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2110      	movs	r1, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fcc5 	bl	8005194 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	e046      	b.n	800189e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181c:	461a      	mov	r2, r3
 800181e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001834:	0151      	lsls	r1, r2, #5
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	440a      	add	r2, r1
 800183a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800183e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001850:	461a      	mov	r2, r3
 8001852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001856:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001888:	0151      	lsls	r1, r2, #5
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	440a      	add	r2, r1
 800188e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001896:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189a:	3301      	adds	r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3b3      	bcc.n	8001810 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d016      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d4:	f043 030b 	orr.w	r3, r3, #11
 80018d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f043 030b 	orr.w	r3, r3, #11
 80018ee:	6453      	str	r3, [r2, #68]	; 0x44
 80018f0:	e015      	b.n	800191e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	4619      	mov	r1, r3
 8001902:	f242 032b 	movw	r3, #8235	; 0x202b
 8001906:	4313      	orrs	r3, r2
 8001908:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001918:	f043 030b 	orr.w	r3, r3, #11
 800191c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001930:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001942:	461a      	mov	r2, r3
 8001944:	f004 fc0e 	bl	8006164 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fb3b 	bl	8005fd8 <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196c:	d124      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fbd2 	bl	800611c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fc86 	bl	800528e <USB_GetDevSpeed>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	f001 fd87 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8001992:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4620      	mov	r0, r4
 800199e:	f003 f98b 	bl	8004cb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f006 fbd1 	bl	800814a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fb0b 	bl	8005fd8 <USB_ReadInterrupts>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d10a      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f006 fbae 	bl	800812e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f002 0208 	and.w	r2, r2, #8
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 faf6 	bl	8005fd8 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b80      	cmp	r3, #128	; 0x80
 80019f4:	d122      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e014      	b.n	8001a32 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 faf1 	bl	800200e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3301      	adds	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3e5      	bcc.n	8001a08 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fac9 	bl	8005fd8 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a50:	d13b      	bne.n	8001aca <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	e02b      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	3340      	adds	r3, #64	; 0x40
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d115      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da12      	bge.n	8001aaa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	333f      	adds	r3, #63	; 0x3f
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fab2 	bl	800200e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3ce      	bcc.n	8001a58 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fa82 	bl	8005fd8 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ade:	d155      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e045      	b.n	8001b72 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d12e      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da2b      	bge.n	8001b6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d121      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6053      	str	r3, [r2, #4]
            break;
 8001b6a:	e007      	b.n	8001b7c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3301      	adds	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3b4      	bcc.n	8001ae6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 fa21 	bl	8005fd8 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f006 fb52 	bl	800824c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fa0b 	bl	8005fd8 <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d115      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f006 fb42 	bl	8008268 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	e000      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x992>
      return;
 8001bf6:	bf00      	nop
    }
  }
}
 8001bf8:	3734      	adds	r7, #52	; 0x34
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_SetAddress+0x1a>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e013      	b.n	8001c40 <HAL_PCD_SetAddress+0x42>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 f969 	bl	8005f08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	70fb      	strb	r3, [r7, #3]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	803b      	strh	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0f      	bge.n	8001c8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3338      	adds	r3, #56	; 0x38
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	705a      	strb	r2, [r3, #1]
 8001c8c:	e00f      	b.n	8001cae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cba:	883a      	ldrh	r2, [r7, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	78ba      	ldrb	r2, [r7, #2]
 8001cc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_PCD_EP_Open+0xaa>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00e      	b.n	8001d10 <HAL_PCD_EP_Open+0xc8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fae9 	bl	80052d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da0f      	bge.n	8001d4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	3338      	adds	r3, #56	; 0x38
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	705a      	strb	r2, [r3, #1]
 8001d4a:	e00f      	b.n	8001d6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_PCD_EP_Close+0x6e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e00e      	b.n	8001da4 <HAL_PCD_EP_Close+0x8c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fb27 	bl	80053e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	460b      	mov	r3, r1
 8001dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	f003 fbc3 	bl	80055a0 <USB_EPStartXfer>

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6979      	ldr	r1, [r7, #20]
 8001e8c:	f003 fb88 	bl	80055a0 <USB_EPStartXfer>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 020f 	and.w	r2, r3, #15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e050      	b.n	8001f5a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da0f      	bge.n	8001ee0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3338      	adds	r3, #56	; 0x38
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	705a      	strb	r2, [r3, #1]
 8001ede:	e00d      	b.n	8001efc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_PCD_EP_SetStall+0x82>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e01e      	b.n	8001f5a <HAL_PCD_EP_SetStall+0xc0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ff18 	bl	8005d60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f004 f90a 	bl	8006164 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d901      	bls.n	8001f80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e042      	b.n	8002006 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0f      	bge.n	8001fa8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_EP_ClrStall+0x86>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e00e      	b.n	8002006 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 ff20 	bl	8005e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da0c      	bge.n	800203c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3338      	adds	r3, #56	; 0x38
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e00c      	b.n	8002056 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fd3f 	bl	8005ae0 <USB_EPStopXfer>
 8002062:	4603      	mov	r3, r0
 8002064:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002066:	7afb      	ldrb	r3, [r7, #11]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3338      	adds	r3, #56	; 0x38
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d901      	bls.n	80020a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e06c      	b.n	8002182 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d902      	bls.n	80020c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3303      	adds	r3, #3
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020cc:	e02b      	b.n	8002126 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d902      	bls.n	80020ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3303      	adds	r3, #3
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002102:	b2db      	uxtb	r3, r3
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4603      	mov	r3, r0
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f003 fd93 	bl	8005c34 <USB_WritePacket>

    ep->xfer_buff  += len;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	441a      	add	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	441a      	add	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	429a      	cmp	r2, r3
 800213a:	d809      	bhi.n	8002150 <PCD_WriteEmptyTxFifo+0xe0>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002144:	429a      	cmp	r2, r3
 8002146:	d203      	bcs.n	8002150 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1be      	bne.n	80020ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	d811      	bhi.n	8002180 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	2201      	movs	r2, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	43db      	mvns	r3, r3
 8002176:	6939      	ldr	r1, [r7, #16]
 8002178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800217c:	4013      	ands	r3, r2
 800217e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d17b      	bne.n	80022ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	f240 80b9 	bls.w	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80b3 	beq.w	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f4:	6093      	str	r3, [r2, #8]
 80021f6:	e0a7      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	2320      	movs	r3, #32
 8002212:	6093      	str	r3, [r2, #8]
 8002214:	e098      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 8093 	bne.w	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d90f      	bls.n	800224a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e07e      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	0159      	lsls	r1, r3, #5
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	440b      	add	r3, r1
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d114      	bne.n	80022ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002294:	461a      	mov	r2, r3
 8002296:	2101      	movs	r1, #1
 8002298:	f003 ff64 	bl	8006164 <USB_EP0_OutStart>
 800229c:	e006      	b.n	80022ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	441a      	add	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 ff06 	bl	80080c4 <HAL_PCD_DataOutStageCallback>
 80022b8:	e046      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d124      	bne.n	800230c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d8:	461a      	mov	r2, r3
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	e032      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	2320      	movs	r3, #32
 80022fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f005 fedd 	bl	80080c4 <HAL_PCD_DataOutStageCallback>
 800230a:	e01d      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d114      	bne.n	800233c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f003 ff14 	bl	8006164 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 febe 	bl	80080c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	4f54300a 	.word	0x4f54300a
 8002358:	4f54310a 	.word	0x4f54310a

0800235c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	333c      	adds	r3, #60	; 0x3c
 8002374:	3304      	adds	r3, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d90e      	bls.n	80023b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f005 fe75 	bl	80080a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d90c      	bls.n	80023d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d0:	461a      	mov	r2, r3
 80023d2:	2101      	movs	r1, #1
 80023d4:	f003 fec6 	bl	8006164 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	4f54300a 	.word	0x4f54300a

080023e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
 80023f4:	4613      	mov	r3, r2
 80023f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002406:	883b      	ldrh	r3, [r7, #0]
 8002408:	0419      	lsls	r1, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	430a      	orrs	r2, r1
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
 8002414:	e028      	b.n	8002468 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e00d      	b.n	8002446 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3340      	adds	r3, #64	; 0x40
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	3301      	adds	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	3b01      	subs	r3, #1
 800244c:	429a      	cmp	r2, r3
 800244e:	d3ec      	bcc.n	800242a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002450:	883b      	ldrh	r3, [r7, #0]
 8002452:	0418      	lsls	r0, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	3b01      	subs	r3, #1
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4302      	orrs	r2, r0
 8002460:	3340      	adds	r3, #64	; 0x40
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_PCDEx_ActivateLPM+0x44>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	10000003 	.word	0x10000003

080024e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_PWREx_ConfigSupply+0x70>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00a      	beq.n	8002522 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_PWREx_ConfigSupply+0x70>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01f      	b.n	800255e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e01d      	b.n	800255e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_PWREx_ConfigSupply+0x70>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	490f      	ldr	r1, [pc, #60]	; (8002568 <HAL_PWREx_ConfigSupply+0x70>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002532:	f7fe f9af 	bl	8000894 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002538:	e009      	b.n	800254e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800253a:	f7fe f9ab 	bl	8000894 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002548:	d901      	bls.n	800254e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_PWREx_ConfigSupply+0x70>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255a:	d1ee      	bne.n	800253a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58024800 	.word	0x58024800

0800256c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	58024800 	.word	0x58024800

0800258c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f000 bc48 	b.w	8002e30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8088 	beq.w	80026be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ae:	4b99      	ldr	r3, [pc, #612]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025b8:	4b96      	ldr	r3, [pc, #600]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d007      	beq.n	80025d4 <HAL_RCC_OscConfig+0x48>
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	2b18      	cmp	r3, #24
 80025c8:	d111      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d10c      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d06d      	beq.n	80026bc <HAL_RCC_OscConfig+0x130>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d169      	bne.n	80026bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f000 bc21 	b.w	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x7a>
 80025f8:	4b86      	ldr	r3, [pc, #536]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a85      	ldr	r2, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x9c>
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a80      	ldr	r2, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b7e      	ldr	r3, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7d      	ldr	r2, [pc, #500]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xc0>
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b75      	ldr	r3, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a74      	ldr	r2, [pc, #464]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 800264c:	4b71      	ldr	r3, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a70      	ldr	r2, [pc, #448]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6d      	ldr	r2, [pc, #436]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe f912 	bl	8000894 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe f90e 	bl	8000894 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e3d4      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe f8fe 	bl	8000894 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe f8fa 	bl	8000894 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e3c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ae:	4b59      	ldr	r3, [pc, #356]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x110>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80ca 	beq.w	8002860 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026cc:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d6:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_OscConfig+0x166>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b18      	cmp	r3, #24
 80026e6:	d156      	bne.n	8002796 <HAL_RCC_OscConfig+0x20a>
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d151      	bne.n	8002796 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f2:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e392      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0219 	bic.w	r2, r3, #25
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	493f      	ldr	r1, [pc, #252]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe f8ba 	bl	8000894 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe f8b6 	bl	8000894 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e37c      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	f7fe f8d7 	bl	80008f4 <HAL_GetREVID>
 8002746:	4603      	mov	r3, r0
 8002748:	f241 0203 	movw	r2, #4099	; 0x1003
 800274c:	4293      	cmp	r3, r2
 800274e:	d817      	bhi.n	8002780 <HAL_RCC_OscConfig+0x1f4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d108      	bne.n	800276a <HAL_RCC_OscConfig+0x1de>
 8002758:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002760:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002766:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002768:	e07a      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	4926      	ldr	r1, [pc, #152]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277e:	e06f      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4921      	ldr	r1, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002794:	e064      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d047      	beq.n	800282e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0219 	bic.w	r2, r3, #25
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	491a      	ldr	r1, [pc, #104]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f870 	bl	8000894 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe f86c 	bl	8000894 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e332      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	f7fe f88d 	bl	80008f4 <HAL_GetREVID>
 80027da:	4603      	mov	r3, r0
 80027dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d819      	bhi.n	8002818 <HAL_RCC_OscConfig+0x28c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d108      	bne.n	80027fe <HAL_RCC_OscConfig+0x272>
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	e030      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	4901      	ldr	r1, [pc, #4]	; (8002814 <HAL_RCC_OscConfig+0x288>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 8002812:	e025      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
 8002814:	58024400 	.word	0x58024400
 8002818:	4b9a      	ldr	r3, [pc, #616]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	4997      	ldr	r1, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e018      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b95      	ldr	r3, [pc, #596]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a94      	ldr	r2, [pc, #592]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe f82b 	bl	8000894 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe f827 	bl	8000894 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2ed      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002854:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a9 	beq.w	80029c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002876:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002878:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d007      	beq.n	8002894 <HAL_RCC_OscConfig+0x308>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b18      	cmp	r3, #24
 8002888:	d13a      	bne.n	8002900 <HAL_RCC_OscConfig+0x374>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d135      	bne.n	8002900 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002894:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x320>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e2c1      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ac:	f7fe f822 	bl	80008f4 <HAL_GetREVID>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d817      	bhi.n	80028ea <HAL_RCC_OscConfig+0x35e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x348>
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ca:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d2:	e075      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	069b      	lsls	r3, r3, #26
 80028e2:	4968      	ldr	r1, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e8:	e06a      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ea:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	4962      	ldr	r1, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fe:	e05f      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d042      	beq.n	800298e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fd ffbe 	bl	8000894 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800291c:	f7fd ffba 	bl	8000894 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e280      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292e:	4b55      	ldr	r3, [pc, #340]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800293a:	f7fd ffdb 	bl	80008f4 <HAL_GetREVID>
 800293e:	4603      	mov	r3, r0
 8002940:	f241 0203 	movw	r2, #4099	; 0x1003
 8002944:	4293      	cmp	r3, r2
 8002946:	d817      	bhi.n	8002978 <HAL_RCC_OscConfig+0x3ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	2b20      	cmp	r3, #32
 800294e:	d108      	bne.n	8002962 <HAL_RCC_OscConfig+0x3d6>
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800295e:	6053      	str	r3, [r2, #4]
 8002960:	e02e      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	069b      	lsls	r3, r3, #26
 8002970:	4944      	ldr	r1, [pc, #272]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
 8002976:	e023      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
 8002978:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	493f      	ldr	r1, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3c      	ldr	r2, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fd ff7b 	bl	8000894 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029a2:	f7fd ff77 	bl	8000894 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e23d      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d036      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fd ff58 	bl	8000894 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fd ff54 	bl	8000894 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e21a      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x45c>
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fd ff3e 	bl	8000894 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fd ff3a 	bl	8000894 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e200      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d039      	beq.n	8002aba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a5a:	f7fd ff1b 	bl	8000894 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fd ff17 	bl	8000894 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1dd      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
 8002a80:	e01b      	b.n	8002aba <HAL_RCC_OscConfig+0x52e>
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a88:	4b9b      	ldr	r3, [pc, #620]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a9a      	ldr	r2, [pc, #616]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a94:	f7fd fefe 	bl	8000894 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9c:	f7fd fefa 	bl	8000894 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aae:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8081 	beq.w	8002bca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	; (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8b      	ldr	r2, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad4:	f7fd fede 	bl	8000894 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fd feda 	bl	8000894 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1a0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x584>
 8002b02:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a7c      	ldr	r2, [pc, #496]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e02d      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x5a6>
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a76      	ldr	r2, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b74      	ldr	r3, [pc, #464]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a73      	ldr	r2, [pc, #460]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c8>
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b6c      	ldr	r3, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a6b      	ldr	r2, [pc, #428]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a64      	ldr	r2, [pc, #400]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fd fe8e 	bl	8000894 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fd fe8a 	bl	8000894 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e14e      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b92:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x5f0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fd fe78 	bl	8000894 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fd fe74 	bl	8000894 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e138      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 812d 	beq.w	8002e2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bd4:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	f000 80bd 	beq.w	8002d5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f040 809e 	bne.w	8002d28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fd fe4c 	bl	8000894 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fd fe48 	bl	8000894 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e10e      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x774>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	430a      	orrs	r2, r1
 8002c32:	4931      	ldr	r1, [pc, #196]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	628b      	str	r3, [r1, #40]	; 0x28
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	3b01      	subs	r3, #1
 8002c48:	025b      	lsls	r3, r3, #9
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	3b01      	subs	r3, #1
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c68:	4923      	ldr	r1, [pc, #140]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_RCC_OscConfig+0x778>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c86:	00d2      	lsls	r2, r2, #3
 8002c88:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f023 020c 	bic.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4917      	ldr	r1, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f023 0202 	bic.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	4912      	ldr	r1, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fd fdd1 	bl	8000894 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x78e>
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	58024800 	.word	0x58024800
 8002d00:	fffffc0c 	.word	0xfffffc0c
 8002d04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fd fdc4 	bl	8000894 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e08a      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x77c>
 8002d26:	e082      	b.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fd fdae 	bl	8000894 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fd fdaa 	bl	8000894 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e070      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x7b0>
 8002d5a:	e068      	b.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d031      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d12a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d122      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d111      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d108      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0e1b      	lsrs	r3, r3, #24
 8002dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e02b      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d01f      	beq.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfa:	f7fd fd4b 	bl	8000894 <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e00:	bf00      	nop
 8002e02:	f7fd fd47 	bl	8000894 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d0f9      	beq.n	8002e02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_OscConfig+0x8b0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e1a:	00d2      	lsls	r2, r2, #3
 8002e1c:	4906      	ldr	r1, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3730      	adds	r7, #48	; 0x30
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	ffff0007 	.word	0xffff0007

08002e40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e19c      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b87      	ldr	r3, [pc, #540]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4985      	ldr	r1, [pc, #532]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b83      	ldr	r3, [pc, #524]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e184      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	4b7b      	ldr	r3, [pc, #492]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d908      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4975      	ldr	r1, [pc, #468]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d908      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	496a      	ldr	r1, [pc, #424]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d908      	bls.n	8002f0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	495e      	ldr	r1, [pc, #376]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d010      	beq.n	8002f3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d908      	bls.n	8002f3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4953      	ldr	r1, [pc, #332]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d908      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f023 020f 	bic.w	r2, r3, #15
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4947      	ldr	r1, [pc, #284]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d055      	beq.n	8003022 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f76:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4940      	ldr	r1, [pc, #256]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f90:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0f6      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ea      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0de      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d6      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f023 0207 	bic.w	r2, r3, #7
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4925      	ldr	r1, [pc, #148]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fd fc4f 	bl	8000894 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fd fc4b 	bl	8000894 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0be      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	429a      	cmp	r2, r3
 8003020:	d1eb      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d214      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 020f 	bic.w	r2, r3, #15
 8003066:	4906      	ldr	r1, [pc, #24]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e086      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
 8003080:	52002000 	.word	0x52002000
 8003084:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d208      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	4939      	ldr	r1, [pc, #228]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d208      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	492e      	ldr	r1, [pc, #184]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d208      	bcs.n	8003112 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4922      	ldr	r1, [pc, #136]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 800310e:	4313      	orrs	r3, r2
 8003110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800312a:	429a      	cmp	r2, r3
 800312c:	d208      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4917      	ldr	r1, [pc, #92]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 800313c:	4313      	orrs	r3, r2
 800313e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003140:	f000 f834 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	4912      	ldr	r1, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x35c>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
 800315c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a0d      	ldr	r2, [pc, #52]	; (800319c <HAL_RCC_ClockConfig+0x35c>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x360>)
 8003176:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x364>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x368>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fb3c 	bl	8000800 <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	58024400 	.word	0x58024400
 800319c:	080086ac 	.word	0x080086ac
 80031a0:	24000004 	.word	0x24000004
 80031a4:	24000000 	.word	0x24000000
 80031a8:	24000008 	.word	0x24000008

080031ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b2:	4bb3      	ldr	r3, [pc, #716]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ba:	2b18      	cmp	r3, #24
 80031bc:	f200 8155 	bhi.w	800346a <HAL_RCC_GetSysClockFreq+0x2be>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	0800322d 	.word	0x0800322d
 80031cc:	0800346b 	.word	0x0800346b
 80031d0:	0800346b 	.word	0x0800346b
 80031d4:	0800346b 	.word	0x0800346b
 80031d8:	0800346b 	.word	0x0800346b
 80031dc:	0800346b 	.word	0x0800346b
 80031e0:	0800346b 	.word	0x0800346b
 80031e4:	0800346b 	.word	0x0800346b
 80031e8:	08003253 	.word	0x08003253
 80031ec:	0800346b 	.word	0x0800346b
 80031f0:	0800346b 	.word	0x0800346b
 80031f4:	0800346b 	.word	0x0800346b
 80031f8:	0800346b 	.word	0x0800346b
 80031fc:	0800346b 	.word	0x0800346b
 8003200:	0800346b 	.word	0x0800346b
 8003204:	0800346b 	.word	0x0800346b
 8003208:	08003259 	.word	0x08003259
 800320c:	0800346b 	.word	0x0800346b
 8003210:	0800346b 	.word	0x0800346b
 8003214:	0800346b 	.word	0x0800346b
 8003218:	0800346b 	.word	0x0800346b
 800321c:	0800346b 	.word	0x0800346b
 8003220:	0800346b 	.word	0x0800346b
 8003224:	0800346b 	.word	0x0800346b
 8003228:	0800325f 	.word	0x0800325f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800322c:	4b94      	ldr	r3, [pc, #592]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003238:	4b91      	ldr	r3, [pc, #580]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	4a90      	ldr	r2, [pc, #576]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800324a:	e111      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800324c:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800324e:	61bb      	str	r3, [r7, #24]
      break;
 8003250:	e10e      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003252:	4b8d      	ldr	r3, [pc, #564]	; (8003488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003254:	61bb      	str	r3, [r7, #24]
      break;
 8003256:	e10b      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003258:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800325a:	61bb      	str	r3, [r7, #24]
      break;
 800325c:	e108      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003268:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003272:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800327e:	4b80      	ldr	r3, [pc, #512]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80e1 	beq.w	8003464 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f000 8083 	beq.w	80033b0 <HAL_RCC_GetSysClockFreq+0x204>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f200 80a1 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x248>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x114>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d056      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032be:	e099      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02d      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032cc:	4b6c      	ldr	r3, [pc, #432]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	4a6b      	ldr	r2, [pc, #428]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003326:	e087      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336a:	e065      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003498 <HAL_RCC_GetSysClockFreq+0x2ec>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ae:	e043      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800349c <HAL_RCC_GetSysClockFreq+0x2f0>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f2:	e021      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003498 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003436:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	0a5b      	lsrs	r3, r3, #9
 800343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003442:	3301      	adds	r3, #1
 8003444:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003450:	edd7 6a07 	vldr	s13, [r7, #28]
 8003454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345c:	ee17 3a90 	vmov	r3, s15
 8003460:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003462:	e005      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
      break;
 8003468:	e002      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800346c:	61bb      	str	r3, [r7, #24]
      break;
 800346e:	bf00      	nop
  }

  return sysclockfreq;
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
 8003484:	03d09000 	.word	0x03d09000
 8003488:	003d0900 	.word	0x003d0900
 800348c:	017d7840 	.word	0x017d7840
 8003490:	46000000 	.word	0x46000000
 8003494:	4c742400 	.word	0x4c742400
 8003498:	4a742400 	.word	0x4a742400
 800349c:	4bbebc20 	.word	0x4bbebc20

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034a6:	f7ff fe81 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	490f      	ldr	r1, [pc, #60]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	58024400 	.word	0x58024400
 80034f4:	080086ac 	.word	0x080086ac
 80034f8:	24000004 	.word	0x24000004
 80034fc:	24000000 	.word	0x24000000

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b0ca      	sub	sp, #296	; 0x128
 8003506:	af00      	add	r7, sp, #0
 8003508:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800350c:	2300      	movs	r3, #0
 800350e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003524:	2500      	movs	r5, #0
 8003526:	ea54 0305 	orrs.w	r3, r4, r5
 800352a:	d049      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003536:	d02f      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353c:	d828      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800353e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003542:	d01a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003548:	d822      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800354e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003552:	d007      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4bb8      	ldr	r3, [pc, #736]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4ab7      	ldr	r2, [pc, #732]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003562:	e01a      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003568:	3308      	adds	r3, #8
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f001 f9d1 	bl	8004914 <RCCEx_PLL2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003578:	e00f      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	3328      	adds	r3, #40	; 0x28
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fa78 	bl	8004a78 <RCCEx_PLL3_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800358e:	e004      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003596:	e000      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035a2:	4ba5      	ldr	r3, [pc, #660]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b0:	4aa1      	ldr	r2, [pc, #644]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6513      	str	r3, [r2, #80]	; 0x50
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035cc:	f04f 0900 	mov.w	r9, #0
 80035d0:	ea58 0309 	orrs.w	r3, r8, r9
 80035d4:	d047      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d82a      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035fd 	.word	0x080035fd
 80035ec:	0800360b 	.word	0x0800360b
 80035f0:	08003621 	.word	0x08003621
 80035f4:	0800363f 	.word	0x0800363f
 80035f8:	0800363f 	.word	0x0800363f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fc:	4b8e      	ldr	r3, [pc, #568]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a8d      	ldr	r2, [pc, #564]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003608:	e01a      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	3308      	adds	r3, #8
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f97e 	bl	8004914 <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800361e:	e00f      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003624:	3328      	adds	r3, #40	; 0x28
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f001 fa25 	bl	8004a78 <RCCEx_PLL3_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003648:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	f023 0107 	bic.w	r1, r3, #7
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	4a78      	ldr	r2, [pc, #480]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6513      	str	r3, [r2, #80]	; 0x50
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003672:	f04f 0b00 	mov.w	fp, #0
 8003676:	ea5a 030b 	orrs.w	r3, sl, fp
 800367a:	d04c      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d030      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368c:	d829      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800368e:	2bc0      	cmp	r3, #192	; 0xc0
 8003690:	d02d      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003692:	2bc0      	cmp	r3, #192	; 0xc0
 8003694:	d825      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d018      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d821      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036a6:	e01c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036b4:	e01c      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ba:	3308      	adds	r3, #8
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f928 	bl	8004914 <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	3328      	adds	r3, #40	; 0x28
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f9cf 	bl	8004a78 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036f8:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	4a4c      	ldr	r2, [pc, #304]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6513      	str	r3, [r2, #80]	; 0x50
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003722:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800372c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d053      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800373e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003742:	d035      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003748:	d82e      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800374a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800374e:	d031      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003750:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003754:	d828      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375a:	d01a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800375c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003760:	d822      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376a:	d007      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800376c:	e01c      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376e:	4b32      	ldr	r3, [pc, #200]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800377a:	e01c      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003780:	3308      	adds	r3, #8
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f001 f8c5 	bl	8004914 <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003790:	e011      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003796:	3328      	adds	r3, #40	; 0x28
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f96c 	bl	8004a78 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a6:	e006      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ce:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d056      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380a:	d038      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800380c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003810:	d831      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003816:	d034      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800381c:	d82b      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800381e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003822:	d01d      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003828:	d825      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800382e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003834:	e01f      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4ba2      	ldr	r3, [pc, #648]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4aa1      	ldr	r2, [pc, #644]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003848:	e01c      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	3308      	adds	r3, #8
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f85e 	bl	8004914 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800385e:	e011      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	3328      	adds	r3, #40	; 0x28
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f001 f905 	bl	8004a78 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800388c:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800389c:	4a8a      	ldr	r2, [pc, #552]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	6593      	str	r3, [r2, #88]	; 0x58
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80038b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d03a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	2b30      	cmp	r3, #48	; 0x30
 80038d4:	d01f      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038d6:	2b30      	cmp	r3, #48	; 0x30
 80038d8:	d819      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d815      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d019      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d111      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038f6:	e011      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fc:	3308      	adds	r3, #8
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f807 	bl	8004914 <RCCEx_PLL2_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800391a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003928:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003934:	430b      	orrs	r3, r1
 8003936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800394e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003952:	2300      	movs	r3, #0
 8003954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003958:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d051      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396c:	d035      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800396e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003972:	d82e      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003978:	d031      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800397a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800397e:	d828      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003984:	d01a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	d822      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d007      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003996:	e01c      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003998:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800399e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039a4:	e01c      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039aa:	3308      	adds	r3, #8
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 ffb0 	bl	8004914 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ba:	e011      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	3328      	adds	r3, #40	; 0x28
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f857 	bl	8004a78 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039e8:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	4a34      	ldr	r2, [pc, #208]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6513      	str	r3, [r2, #80]	; 0x50
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a20:	460b      	mov	r3, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d056      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a30:	d033      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a36:	d82c      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a3c:	d02f      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a42:	d826      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a48:	d02b      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a4e:	d820      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a54:	d012      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5a:	d81a      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d022      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d115      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ff50 	bl	8004914 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a80:	3328      	adds	r3, #40	; 0x28
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fff7 	bl	8004a78 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abe:	4a02      	ldr	r2, [pc, #8]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ac6:	bf00      	nop
 8003ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d055      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b00:	d033      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b06:	d82c      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d02f      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d826      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b18:	d02b      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b1e:	d820      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d012      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2a:	d81a      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d115      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fee8 	bl	8004914 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e015      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b50:	3328      	adds	r3, #40	; 0x28
 8003b52:	2101      	movs	r1, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 ff8f 	bl	8004a78 <RCCEx_PLL3_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e004      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b80:	4ba3      	ldr	r3, [pc, #652]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b90:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
 8003b96:	e003      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d037      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bca:	d00e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd0:	d816      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bda:	d111      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a8b      	ldr	r2, [pc, #556]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003be8:	e00f      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	3308      	adds	r3, #8
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fe8e 	bl	8004914 <RCCEx_PLL2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bfe:	e004      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c12:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a7b      	ldr	r2, [pc, #492]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6513      	str	r3, [r2, #80]	; 0x50
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d039      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d81c      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c71 	.word	0x08003c71
 8003c68:	08003c7f 	.word	0x08003c7f
 8003c6c:	08003c9d 	.word	0x08003c9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	3308      	adds	r3, #8
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fe44 	bl	8004914 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ca6:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f023 0103 	bic.w	r1, r3, #3
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f000 809f 	beq.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf2:	f7fc fdcf 	bl	8000894 <HAL_GetTick>
 8003cf6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fc fdca 	bl	8000894 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d903      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ed      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d179      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d34:	4053      	eors	r3, r2
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4a:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a30      	ldr	r2, [pc, #192]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d56:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d62:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d118      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fc fd8c 	bl	8000894 <HAL_GetTick>
 8003d7c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d80:	e00d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fc fd87 	bl	8000894 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d903      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0eb      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d129      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc2:	d10e      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dd4:	091a      	lsrs	r2, r3, #4
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6113      	str	r3, [r2, #16]
 8003de0:	e005      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dec:	6113      	str	r3, [r2, #16]
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	e00e      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e0e:	e009      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58024800 	.word	0x58024800
 8003e18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f002 0301 	and.w	r3, r2, #1
 8003e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f000 8089 	beq.w	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4c:	2b28      	cmp	r3, #40	; 0x28
 8003e4e:	d86b      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e50:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003f31 	.word	0x08003f31
 8003e5c:	08003f29 	.word	0x08003f29
 8003e60:	08003f29 	.word	0x08003f29
 8003e64:	08003f29 	.word	0x08003f29
 8003e68:	08003f29 	.word	0x08003f29
 8003e6c:	08003f29 	.word	0x08003f29
 8003e70:	08003f29 	.word	0x08003f29
 8003e74:	08003f29 	.word	0x08003f29
 8003e78:	08003efd 	.word	0x08003efd
 8003e7c:	08003f29 	.word	0x08003f29
 8003e80:	08003f29 	.word	0x08003f29
 8003e84:	08003f29 	.word	0x08003f29
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f29 	.word	0x08003f29
 8003e90:	08003f29 	.word	0x08003f29
 8003e94:	08003f29 	.word	0x08003f29
 8003e98:	08003f13 	.word	0x08003f13
 8003e9c:	08003f29 	.word	0x08003f29
 8003ea0:	08003f29 	.word	0x08003f29
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f29 	.word	0x08003f29
 8003eb8:	08003f31 	.word	0x08003f31
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f31 	.word	0x08003f31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	3308      	adds	r3, #8
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fd05 	bl	8004914 <RCCEx_PLL2_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f10:	e00f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f16:	3328      	adds	r3, #40	; 0x28
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fdac 	bl	8004a78 <RCCEx_PLL3_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f3a:	4bbf      	ldr	r3, [pc, #764]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	4abb      	ldr	r2, [pc, #748]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	6553      	str	r3, [r2, #84]	; 0x54
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f002 0302 	and.w	r3, r2, #2
 8003f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	d041      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d824      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fd5 	.word	0x08003fd5
 8003f8c:	08003fa1 	.word	0x08003fa1
 8003f90:	08003fb7 	.word	0x08003fb7
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fd5 	.word	0x08003fd5
 8003f9c:	08003fd5 	.word	0x08003fd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fcb3 	bl	8004914 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e00f      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	3328      	adds	r3, #40	; 0x28
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fd5a 	bl	8004a78 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fde:	4b96      	ldr	r3, [pc, #600]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f023 0107 	bic.w	r1, r3, #7
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fec:	4a92      	ldr	r2, [pc, #584]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 0304 	and.w	r3, r2, #4
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004012:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d044      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004024:	2b05      	cmp	r3, #5
 8004026:	d825      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	0800407d 	.word	0x0800407d
 8004034:	08004049 	.word	0x08004049
 8004038:	0800405f 	.word	0x0800405f
 800403c:	0800407d 	.word	0x0800407d
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800407d 	.word	0x0800407d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	3308      	adds	r3, #8
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fc5f 	bl	8004914 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004062:	3328      	adds	r3, #40	; 0x28
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd06 	bl	8004a78 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f023 0107 	bic.w	r1, r3, #7
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f002 0320 	and.w	r3, r2, #32
 80040b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d055      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d2:	d033      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d8:	d82c      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040de:	d02f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d826      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ea:	d02b      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040f0:	d820      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f6:	d012      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d81a      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004106:	d115      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	3308      	adds	r3, #8
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fbff 	bl	8004914 <RCCEx_PLL2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800411c:	e015      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	3328      	adds	r3, #40	; 0x28
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fca6 	bl	8004a78 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004132:	e00a      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	4a35      	ldr	r2, [pc, #212]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6553      	str	r3, [r2, #84]	; 0x54
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004188:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d058      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800419e:	d033      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041a4:	d82c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d02f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d826      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b6:	d02b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041bc:	d820      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c2:	d012      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d81a      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d022      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d115      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d8:	3308      	adds	r3, #8
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fb99 	bl	8004914 <RCCEx_PLL2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041e8:	e015      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ee:	3328      	adds	r3, #40	; 0x28
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fc40 	bl	8004a78 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041fe:	e00a      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004208:	bf00      	nop
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10e      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422e:	4a02      	ldr	r2, [pc, #8]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004236:	bf00      	nop
 8004238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004240:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800425a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	d055      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800426c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004270:	d033      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004272:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004276:	d82c      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d02f      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800427e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004282:	d826      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004284:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004288:	d02b      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800428a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800428e:	d820      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004294:	d012      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429a:	d81a      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d022      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d115      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	3308      	adds	r3, #8
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fb30 	bl	8004914 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ba:	e015      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c0:	3328      	adds	r3, #40	; 0x28
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fbd7 	bl	8004a78 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042d0:	e00a      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042da:	bf00      	nop
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042f0:	4ba1      	ldr	r3, [pc, #644]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004300:	4a9d      	ldr	r2, [pc, #628]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004302:	430b      	orrs	r3, r1
 8004304:	6593      	str	r3, [r2, #88]	; 0x58
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f002 0308 	and.w	r3, r2, #8
 800431c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004326:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800432a:	460b      	mov	r3, r1
 800432c:	4313      	orrs	r3, r2
 800432e:	d01e      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	3328      	adds	r3, #40	; 0x28
 8004344:	2102      	movs	r1, #2
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb96 	bl	8004a78 <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004358:	4b87      	ldr	r3, [pc, #540]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004368:	4a83      	ldr	r2, [pc, #524]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800436a:	430b      	orrs	r3, r1
 800436c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f002 0310 	and.w	r3, r2, #16
 800437a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004384:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d01e      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439a:	d10c      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	3328      	adds	r3, #40	; 0x28
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fb67 	bl	8004a78 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c6:	4a6c      	ldr	r2, [pc, #432]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d03e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f8:	d022      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fe:	d81b      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d00b      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800440a:	e015      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004410:	3308      	adds	r3, #8
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa7d 	bl	8004914 <RCCEx_PLL2_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004420:	e00f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004426:	3328      	adds	r3, #40	; 0x28
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb24 	bl	8004a78 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800445a:	4a47      	ldr	r2, [pc, #284]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445c:	430b      	orrs	r3, r1
 800445e:	6593      	str	r3, [r2, #88]	; 0x58
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004476:	67bb      	str	r3, [r7, #120]	; 0x78
 8004478:	2300      	movs	r3, #0
 800447a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800447c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d03b      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004492:	d01f      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004498:	d818      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d003      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a4:	d007      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044a6:	e011      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	3328      	adds	r3, #40	; 0x28
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fada 	bl	8004a78 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6553      	str	r3, [r2, #84]	; 0x54
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800450a:	673b      	str	r3, [r7, #112]	; 0x70
 800450c:	2300      	movs	r3, #0
 800450e:	677b      	str	r3, [r7, #116]	; 0x74
 8004510:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d034      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d007      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a11      	ldr	r2, [pc, #68]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004538:	e00e      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	3308      	adds	r3, #8
 8004540:	2102      	movs	r1, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f9e6 	bl	8004914 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	4a02      	ldr	r2, [pc, #8]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004570:	430b      	orrs	r3, r1
 8004572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004590:	66bb      	str	r3, [r7, #104]	; 0x68
 8004592:	2300      	movs	r3, #0
 8004594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004596:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800459a:	460b      	mov	r3, r1
 800459c:	4313      	orrs	r3, r2
 800459e:	d00c      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	3328      	adds	r3, #40	; 0x28
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fa65 	bl	8004a78 <RCCEx_PLL3_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045c6:	663b      	str	r3, [r7, #96]	; 0x60
 80045c8:	2300      	movs	r3, #0
 80045ca:	667b      	str	r3, [r7, #100]	; 0x64
 80045cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d038      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e2:	d018      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e8:	d811      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ee:	d014      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d80b      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d106      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4bc3      	ldr	r3, [pc, #780]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4ac2      	ldr	r2, [pc, #776]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004614:	e004      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004616:	bf00      	nop
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800461e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004628:	4bb9      	ldr	r3, [pc, #740]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004638:	4ab5      	ldr	r2, [pc, #724]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463a:	430b      	orrs	r3, r1
 800463c:	6553      	str	r3, [r2, #84]	; 0x54
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004654:	65bb      	str	r3, [r7, #88]	; 0x58
 8004656:	2300      	movs	r3, #0
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004664:	4baa      	ldr	r3, [pc, #680]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004672:	4aa7      	ldr	r2, [pc, #668]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004684:	653b      	str	r3, [r7, #80]	; 0x50
 8004686:	2300      	movs	r3, #0
 8004688:	657b      	str	r3, [r7, #84]	; 0x54
 800468a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004694:	4b9e      	ldr	r3, [pc, #632]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046a4:	4a9a      	ldr	r2, [pc, #616]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b8:	2300      	movs	r3, #0
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046c6:	4b92      	ldr	r3, [pc, #584]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	4a8e      	ldr	r2, [pc, #568]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046e6:	643b      	str	r3, [r7, #64]	; 0x40
 80046e8:	2300      	movs	r3, #0
 80046ea:	647b      	str	r3, [r7, #68]	; 0x44
 80046ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046f6:	4b86      	ldr	r3, [pc, #536]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4a85      	ldr	r2, [pc, #532]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004700:	6113      	str	r3, [r2, #16]
 8004702:	4b83      	ldr	r3, [pc, #524]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800470e:	4a80      	ldr	r2, [pc, #512]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004710:	430b      	orrs	r3, r1
 8004712:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
 8004722:	2300      	movs	r3, #0
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004730:	4b77      	ldr	r3, [pc, #476]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004734:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	4a74      	ldr	r2, [pc, #464]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004740:	430b      	orrs	r3, r1
 8004742:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
 8004756:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004760:	4b6b      	ldr	r3, [pc, #428]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004770:	4a67      	ldr	r2, [pc, #412]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004772:	430b      	orrs	r3, r1
 8004774:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	2100      	movs	r1, #0
 8004780:	62b9      	str	r1, [r7, #40]	; 0x28
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	3308      	adds	r3, #8
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f8ba 	bl	8004914 <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	6239      	str	r1, [r7, #32]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f89a 	bl	8004914 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	61b9      	str	r1, [r7, #24]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	3308      	adds	r3, #8
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f87a 	bl	8004914 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	6139      	str	r1, [r7, #16]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	3328      	adds	r3, #40	; 0x28
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f90c 	bl	8004a78 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	2100      	movs	r1, #0
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f8ec 	bl	8004a78 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	2100      	movs	r1, #0
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d011      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2102      	movs	r1, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f8cc 	bl	8004a78 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80048f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
}
 8004904:	4618      	mov	r0, r3
 8004906:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800490a:	46bd      	mov	sp, r7
 800490c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004910:	58024400 	.word	0x58024400

08004914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004922:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b03      	cmp	r3, #3
 800492c:	d101      	bne.n	8004932 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e099      	b.n	8004a66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004932:	4b4f      	ldr	r3, [pc, #316]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4e      	ldr	r2, [pc, #312]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fb ffa9 	bl	8000894 <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004944:	e008      	b.n	8004958 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004946:	f7fb ffa5 	bl	8000894 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e086      	b.n	8004a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004964:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	031b      	lsls	r3, r3, #12
 8004972:	493f      	ldr	r1, [pc, #252]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	628b      	str	r3, [r1, #40]	; 0x28
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	3b01      	subs	r3, #1
 800497e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	3b01      	subs	r3, #1
 8004988:	025b      	lsls	r3, r3, #9
 800498a:	b29b      	uxth	r3, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a8:	4931      	ldr	r1, [pc, #196]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	492d      	ldr	r1, [pc, #180]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f023 0220 	bic.w	r2, r3, #32
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4928      	ldr	r1, [pc, #160]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	f023 0310 	bic.w	r3, r3, #16
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <RCCEx_PLL2_Config+0x160>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69d2      	ldr	r2, [r2, #28]
 80049ea:	00d2      	lsls	r2, r2, #3
 80049ec:	4920      	ldr	r1, [pc, #128]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 80049f8:	f043 0310 	orr.w	r3, r3, #16
 80049fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a10:	e00f      	b.n	8004a32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a24:	e005      	b.n	8004a32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fb ff29 	bl	8000894 <HAL_GetTick>
 8004a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a46:	f7fb ff25 	bl	8000894 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e006      	b.n	8004a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <RCCEx_PLL2_Config+0x15c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
 8004a74:	ffff0007 	.word	0xffff0007

08004a78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a86:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d101      	bne.n	8004a96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e099      	b.n	8004bca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a96:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4e      	ldr	r2, [pc, #312]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fb fef7 	bl	8000894 <HAL_GetTick>
 8004aa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004aaa:	f7fb fef3 	bl	8000894 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e086      	b.n	8004bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004abc:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	051b      	lsls	r3, r3, #20
 8004ad6:	493f      	ldr	r1, [pc, #252]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	628b      	str	r3, [r1, #40]	; 0x28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	025b      	lsls	r3, r3, #9
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b0c:	4931      	ldr	r1, [pc, #196]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	492d      	ldr	r1, [pc, #180]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b24:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4928      	ldr	r1, [pc, #160]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <RCCEx_PLL3_Config+0x160>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	69d2      	ldr	r2, [r2, #28]
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	4920      	ldr	r1, [pc, #128]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b56:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b74:	e00f      	b.n	8004b96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b88:	e005      	b.n	8004b96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fb fe77 	bl	8000894 <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004baa:	f7fb fe73 	bl	8000894 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e006      	b.n	8004bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <RCCEx_PLL3_Config+0x15c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	ffff0007 	.word	0xffff0007

08004bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bdc:	b084      	sub	sp, #16
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	f107 001c 	add.w	r0, r7, #28
 8004bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d120      	bne.n	8004c36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <USB_CoreInit+0xd4>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f001 faf8 	bl	8006220 <USB_CoreReset>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e01a      	b.n	8004c6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 faec 	bl	8006220 <USB_CoreReset>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c5e:	e005      	b.n	8004c6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d116      	bne.n	8004ca0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <USB_CoreInit+0xd8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f043 0206 	orr.w	r2, r3, #6
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cac:	b004      	add	sp, #16
 8004cae:	4770      	bx	lr
 8004cb0:	ffbdffbf 	.word	0xffbdffbf
 8004cb4:	03ee0000 	.word	0x03ee0000

08004cb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d165      	bne.n	8004d98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a41      	ldr	r2, [pc, #260]	; (8004dd4 <USB_SetTurnaroundTime+0x11c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d906      	bls.n	8004ce2 <USB_SetTurnaroundTime+0x2a>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a40      	ldr	r2, [pc, #256]	; (8004dd8 <USB_SetTurnaroundTime+0x120>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d202      	bcs.n	8004ce2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cdc:	230f      	movs	r3, #15
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e062      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <USB_SetTurnaroundTime+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d306      	bcc.n	8004cf8 <USB_SetTurnaroundTime+0x40>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <USB_SetTurnaroundTime+0x124>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d202      	bcs.n	8004cf8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cf2:	230e      	movs	r3, #14
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e057      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a38      	ldr	r2, [pc, #224]	; (8004ddc <USB_SetTurnaroundTime+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d306      	bcc.n	8004d0e <USB_SetTurnaroundTime+0x56>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a37      	ldr	r2, [pc, #220]	; (8004de0 <USB_SetTurnaroundTime+0x128>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d202      	bcs.n	8004d0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d08:	230d      	movs	r3, #13
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e04c      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a33      	ldr	r2, [pc, #204]	; (8004de0 <USB_SetTurnaroundTime+0x128>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d306      	bcc.n	8004d24 <USB_SetTurnaroundTime+0x6c>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <USB_SetTurnaroundTime+0x12c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d802      	bhi.n	8004d24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d1e:	230c      	movs	r3, #12
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e041      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <USB_SetTurnaroundTime+0x12c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d906      	bls.n	8004d3a <USB_SetTurnaroundTime+0x82>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <USB_SetTurnaroundTime+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d802      	bhi.n	8004d3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d34:	230b      	movs	r3, #11
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e036      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <USB_SetTurnaroundTime+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d906      	bls.n	8004d50 <USB_SetTurnaroundTime+0x98>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <USB_SetTurnaroundTime+0x134>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d802      	bhi.n	8004d50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d4a:	230a      	movs	r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e02b      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a26      	ldr	r2, [pc, #152]	; (8004dec <USB_SetTurnaroundTime+0x134>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d906      	bls.n	8004d66 <USB_SetTurnaroundTime+0xae>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <USB_SetTurnaroundTime+0x138>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d202      	bcs.n	8004d66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d60:	2309      	movs	r3, #9
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e020      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <USB_SetTurnaroundTime+0x138>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d306      	bcc.n	8004d7c <USB_SetTurnaroundTime+0xc4>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <USB_SetTurnaroundTime+0x13c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d802      	bhi.n	8004d7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d76:	2308      	movs	r3, #8
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e015      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <USB_SetTurnaroundTime+0x13c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d906      	bls.n	8004d92 <USB_SetTurnaroundTime+0xda>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <USB_SetTurnaroundTime+0x140>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d202      	bcs.n	8004d92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d8c:	2307      	movs	r3, #7
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e00a      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d92:	2306      	movs	r3, #6
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e007      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d9e:	2309      	movs	r3, #9
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e001      	b.n	8004da8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004da4:	2309      	movs	r3, #9
 8004da6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	029b      	lsls	r3, r3, #10
 8004dbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	00d8acbf 	.word	0x00d8acbf
 8004dd8:	00e4e1c0 	.word	0x00e4e1c0
 8004ddc:	00f42400 	.word	0x00f42400
 8004de0:	01067380 	.word	0x01067380
 8004de4:	011a499f 	.word	0x011a499f
 8004de8:	01312cff 	.word	0x01312cff
 8004dec:	014ca43f 	.word	0x014ca43f
 8004df0:	016e3600 	.word	0x016e3600
 8004df4:	01a6ab1f 	.word	0x01a6ab1f
 8004df8:	01e84800 	.word	0x01e84800

08004dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d115      	bne.n	8004e8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f7fb fd1c 	bl	80008ac <HAL_Delay>
      ms++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f93f 	bl	80060fe <USB_GetMode>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d01e      	beq.n	8004ec4 <USB_SetCurrentMode+0x84>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b31      	cmp	r3, #49	; 0x31
 8004e8a:	d9f0      	bls.n	8004e6e <USB_SetCurrentMode+0x2e>
 8004e8c:	e01a      	b.n	8004ec4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d115      	bne.n	8004ec0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f7fb fd03 	bl	80008ac <HAL_Delay>
      ms++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 f926 	bl	80060fe <USB_GetMode>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <USB_SetCurrentMode+0x84>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b31      	cmp	r3, #49	; 0x31
 8004ebc:	d9f0      	bls.n	8004ea0 <USB_SetCurrentMode+0x60>
 8004ebe:	e001      	b.n	8004ec4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e005      	b.n	8004ed0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b32      	cmp	r3, #50	; 0x32
 8004ec8:	d101      	bne.n	8004ece <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed8:	b084      	sub	sp, #16
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e009      	b.n	8004f0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0e      	cmp	r3, #14
 8004f10:	d9f2      	bls.n	8004ef8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11c      	bne.n	8004f52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e005      	b.n	8004f5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f64:	461a      	mov	r2, r3
 8004f66:	2300      	movs	r3, #0
 8004f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f70:	4619      	mov	r1, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	461a      	mov	r2, r3
 8004f7a:	680b      	ldr	r3, [r1, #0]
 8004f7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10c      	bne.n	8004f9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f965 	bl	800525c <USB_SetDevSpeed>
 8004f92:	e008      	b.n	8004fa6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f94:	2101      	movs	r1, #1
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f960 	bl	800525c <USB_SetDevSpeed>
 8004f9c:	e003      	b.n	8004fa6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f95b 	bl	800525c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8f3 	bl	8005194 <USB_FlushTxFifo>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f91f 	bl	80051fc <USB_FlushRxFifo>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e043      	b.n	800507a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005008:	d118      	bne.n	800503c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	461a      	mov	r2, r3
 800501e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e013      	b.n	800504e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e008      	b.n	800504e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	461a      	mov	r2, r3
 800504a:	2300      	movs	r3, #0
 800504c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	461a      	mov	r2, r3
 800506e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3301      	adds	r3, #1
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d3b7      	bcc.n	8004ff2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	e043      	b.n	8005110 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800509a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509e:	d118      	bne.n	80050d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e013      	b.n	80050e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	461a      	mov	r2, r3
 80050ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e008      	b.n	80050e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	461a      	mov	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	429a      	cmp	r2, r3
 8005116:	d3b7      	bcc.n	8005088 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800512a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005138:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f043 0210 	orr.w	r2, r3, #16
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <USB_DevInit+0x2b4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f043 0208 	orr.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <USB_DevInit+0x2b8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005188:	b004      	add	sp, #16
 800518a:	4770      	bx	lr
 800518c:	803c3800 	.word	0x803c3800
 8005190:	40000004 	.word	0x40000004

08005194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_FlushTxFifo+0x64>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e01b      	b.n	80051ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	daf2      	bge.n	80051a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	019b      	lsls	r3, r3, #6
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <USB_FlushTxFifo+0x64>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e006      	b.n	80051ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d0f0      	beq.n	80051cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	00030d40 	.word	0x00030d40

080051fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <USB_FlushRxFifo+0x5c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e018      	b.n	800524c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	daf2      	bge.n	8005208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2210      	movs	r2, #16
 800522a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a08      	ldr	r2, [pc, #32]	; (8005258 <USB_FlushRxFifo+0x5c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e006      	b.n	800524c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d0f0      	beq.n	800522c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	00030d40 	.word	0x00030d40

0800525c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]
 80052b2:	e00a      	b.n	80052ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d002      	beq.n	80052c0 <USB_GetDevSpeed+0x32>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d102      	bne.n	80052c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052c0:	2302      	movs	r3, #2
 80052c2:	75fb      	strb	r3, [r7, #23]
 80052c4:	e001      	b.n	80052ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052c6:	230f      	movs	r3, #15
 80052c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d139      	bne.n	8005368 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	b29b      	uxth	r3, r3
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005312:	4313      	orrs	r3, r2
 8005314:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d153      	bne.n	80053d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005348:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	059b      	lsls	r3, r3, #22
 800534e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005350:	431a      	orrs	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	0159      	lsls	r1, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	440b      	add	r3, r1
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	4619      	mov	r1, r3
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <USB_ActivateEndpoint+0x10c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
 8005366:	e035      	b.n	80053d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	2101      	movs	r1, #1
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005386:	4313      	orrs	r3, r2
 8005388:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d119      	bne.n	80053d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	791b      	ldrb	r3, [r3, #4]
 80053ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053bc:	430b      	orrs	r3, r1
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	0159      	lsls	r1, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	440b      	add	r3, r1
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	4619      	mov	r1, r3
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <USB_ActivateEndpoint+0x10c>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	10008000 	.word	0x10008000

080053e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d161      	bne.n	80054c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541a:	d11f      	bne.n	800545c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800543a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	2101      	movs	r1, #1
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	b29b      	uxth	r3, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800547c:	4013      	ands	r3, r2
 800547e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	b29b      	uxth	r3, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	0159      	lsls	r1, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	440b      	add	r3, r1
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	4619      	mov	r1, r3
 80054c0:	4b35      	ldr	r3, [pc, #212]	; (8005598 <USB_DeactivateEndpoint+0x1b0>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]
 80054c6:	e060      	b.n	800558a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054de:	d11f      	bne.n	8005520 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	43db      	mvns	r3, r3
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4013      	ands	r3, r2
 8005542:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2101      	movs	r1, #1
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	43db      	mvns	r3, r3
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4013      	ands	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0159      	lsls	r1, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	440b      	add	r3, r1
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	4619      	mov	r1, r3
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <USB_DeactivateEndpoint+0x1b4>)
 8005586:	4013      	ands	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	ec337800 	.word	0xec337800
 800559c:	eff37800 	.word	0xeff37800

080055a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 8181 	bne.w	80058c4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d132      	bne.n	8005630 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	0159      	lsls	r1, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	440b      	add	r3, r1
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	4619      	mov	r1, r3
 80055e6:	4ba5      	ldr	r3, [pc, #660]	; (800587c <USB_EPStartXfer+0x2dc>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800560a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	0159      	lsls	r1, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	440b      	add	r3, r1
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	4619      	mov	r1, r3
 8005628:	4b95      	ldr	r3, [pc, #596]	; (8005880 <USB_EPStartXfer+0x2e0>)
 800562a:	4013      	ands	r3, r2
 800562c:	610b      	str	r3, [r1, #16]
 800562e:	e092      	b.n	8005756 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	0159      	lsls	r1, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	440b      	add	r3, r1
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	4619      	mov	r1, r3
 800564c:	4b8c      	ldr	r3, [pc, #560]	; (8005880 <USB_EPStartXfer+0x2e0>)
 800564e:	4013      	ands	r3, r2
 8005650:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	0159      	lsls	r1, r3, #5
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	440b      	add	r3, r1
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	4619      	mov	r1, r3
 800566e:	4b83      	ldr	r3, [pc, #524]	; (800587c <USB_EPStartXfer+0x2dc>)
 8005670:	4013      	ands	r3, r2
 8005672:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11a      	bne.n	80056b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ac:	6113      	str	r3, [r2, #16]
 80056ae:	e01b      	b.n	80056e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6919      	ldr	r1, [r3, #16]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	440b      	add	r3, r1
 80056c8:	1e59      	subs	r1, r3, #1
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80056d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056d4:	4b6b      	ldr	r3, [pc, #428]	; (8005884 <USB_EPStartXfer+0x2e4>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	0148      	lsls	r0, r1, #5
 80056dc:	69f9      	ldr	r1, [r7, #28]
 80056de:	4401      	add	r1, r0
 80056e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	0148      	lsls	r0, r1, #5
 8005702:	69f9      	ldr	r1, [r7, #28]
 8005704:	4401      	add	r1, r0
 8005706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	791b      	ldrb	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d11f      	bne.n	8005756 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005734:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005754:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d14b      	bne.n	80057f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	791b      	ldrb	r3, [r3, #4]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d128      	bne.n	80057d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d110      	bne.n	80057b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e00f      	b.n	80057d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e16a      	b.n	8005aca <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005812:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	791b      	ldrb	r3, [r3, #4]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d015      	beq.n	8005848 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8152 	beq.w	8005aca <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f303 	lsl.w	r3, r1, r3
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005842:	4313      	orrs	r3, r2
 8005844:	634b      	str	r3, [r1, #52]	; 0x34
 8005846:	e140      	b.n	8005aca <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d117      	bne.n	8005888 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e016      	b.n	80058a8 <USB_EPStartXfer+0x308>
 800587a:	bf00      	nop
 800587c:	e007ffff 	.word	0xe007ffff
 8005880:	fff80000 	.word	0xfff80000
 8005884:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	68d9      	ldr	r1, [r3, #12]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	b298      	uxth	r0, r3
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	4603      	mov	r3, r0
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f9b9 	bl	8005c34 <USB_WritePacket>
 80058c2:	e102      	b.n	8005aca <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	0159      	lsls	r1, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	440b      	add	r3, r1
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	4619      	mov	r1, r3
 80058e0:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <USB_EPStartXfer+0x534>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	0159      	lsls	r1, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	440b      	add	r3, r1
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	4619      	mov	r1, r3
 8005902:	4b75      	ldr	r3, [pc, #468]	; (8005ad8 <USB_EPStartXfer+0x538>)
 8005904:	4013      	ands	r3, r2
 8005906:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12f      	bne.n	800596e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	0148      	lsls	r0, r1, #5
 8005940:	69f9      	ldr	r1, [r7, #28]
 8005942:	4401      	add	r1, r0
 8005944:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005948:	4313      	orrs	r3, r2
 800594a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800596a:	6113      	str	r3, [r2, #16]
 800596c:	e05f      	b.n	8005a2e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d123      	bne.n	80059be <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	0148      	lsls	r0, r1, #5
 8005990:	69f9      	ldr	r1, [r7, #28]
 8005992:	4401      	add	r1, r0
 8005994:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005998:	4313      	orrs	r3, r2
 800599a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ba:	6113      	str	r3, [r2, #16]
 80059bc:	e037      	b.n	8005a2e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	4413      	add	r3, r2
 80059c8:	1e5a      	subs	r2, r3, #1
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	8afa      	ldrh	r2, [r7, #22]
 80059da:	fb03 f202 	mul.w	r2, r3, r2
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	8afb      	ldrh	r3, [r7, #22]
 80059f2:	04d9      	lsls	r1, r3, #19
 80059f4:	4b39      	ldr	r3, [pc, #228]	; (8005adc <USB_EPStartXfer+0x53c>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	0148      	lsls	r0, r1, #5
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	4401      	add	r1, r0
 8005a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a04:	4313      	orrs	r3, r2
 8005a06:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	0148      	lsls	r0, r1, #5
 8005a22:	69f9      	ldr	r1, [r7, #28]
 8005a24:	4401      	add	r1, r0
 8005a26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10d      	bne.n	8005a50 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d128      	bne.n	8005aaa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d110      	bne.n	8005a8a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e00f      	b.n	8005aaa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ac8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	fff80000 	.word	0xfff80000
 8005ad8:	e007ffff 	.word	0xe007ffff
 8005adc:	1ff80000 	.word	0x1ff80000

08005ae0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d14a      	bne.n	8005b94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	f040 8086 	bne.w	8005c26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d902      	bls.n	8005b78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
          break;
 8005b76:	e056      	b.n	8005c26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b90:	d0e7      	beq.n	8005b62 <USB_EPStopXfer+0x82>
 8005b92:	e048      	b.n	8005c26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bac:	d13b      	bne.n	8005c26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	7812      	ldrb	r2, [r2, #0]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d902      	bls.n	8005c0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
          break;
 8005c0a:	e00c      	b.n	8005c26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c24:	d0e7      	beq.n	8005bf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	; 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	461a      	mov	r2, r3
 8005c42:	460b      	mov	r3, r1
 8005c44:	71fb      	strb	r3, [r7, #7]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d123      	bne.n	8005ca2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c5a:	88bb      	ldrh	r3, [r7, #4]
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e018      	b.n	8005c9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	031a      	lsls	r2, r3, #12
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c74:	461a      	mov	r2, r3
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3301      	adds	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3e2      	bcc.n	8005c68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b08b      	sub	sp, #44	; 0x2c
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	e014      	b.n	8005d06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	3301      	adds	r3, #1
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	3301      	adds	r3, #1
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3e6      	bcc.n	8005cdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d0e:	8bfb      	ldrh	r3, [r7, #30]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01e      	beq.n	8005d52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	701a      	strb	r2, [r3, #0]
      i++;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	3301      	adds	r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d46:	8bfb      	ldrh	r3, [r7, #30]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ea      	bne.n	8005d28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	372c      	adds	r7, #44	; 0x2c
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d12c      	bne.n	8005dd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db12      	blt.n	8005db4 <USB_EPSetStall+0x54>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e02b      	b.n	8005e2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	db12      	blt.n	8005e0e <USB_EPSetStall+0xae>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00f      	beq.n	8005e0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d128      	bne.n	8005eaa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	791b      	ldrb	r3, [r3, #4]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d003      	beq.n	8005e88 <USB_EPClearStall+0x4c>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d138      	bne.n	8005efa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e027      	b.n	8005efa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d003      	beq.n	8005eda <USB_EPClearStall+0x9e>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d10f      	bne.n	8005efa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f6e:	f023 0303 	bic.w	r3, r3, #3
 8005f72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f82:	f023 0302 	bic.w	r3, r3, #2
 8005f86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc4:	f043 0302 	orr.w	r3, r3, #2
 8005fc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	0c1b      	lsrs	r3, r3, #16
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	b29b      	uxth	r3, r3
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4013      	ands	r3, r2
 8006092:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006094:	68bb      	ldr	r3, [r7, #8]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4013      	ands	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f0:	68bb      	ldr	r3, [r7, #8]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0301 	and.w	r3, r3, #1
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	4619      	mov	r1, r3
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <USB_ActivateSetup+0x44>)
 800613a:	4013      	ands	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	fffff800 	.word	0xfffff800

08006164 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	460b      	mov	r3, r1
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	333c      	adds	r3, #60	; 0x3c
 800617a:	3304      	adds	r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4a26      	ldr	r2, [pc, #152]	; (800621c <USB_EP0_OutStart+0xb8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d90a      	bls.n	800619e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006198:	d101      	bne.n	800619e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e037      	b.n	800620e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f043 0318 	orr.w	r3, r3, #24
 80061d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d10f      	bne.n	800620c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800620a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	4f54300a 	.word	0x4f54300a

08006220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a13      	ldr	r2, [pc, #76]	; (8006284 <USB_CoreReset+0x64>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e01b      	b.n	8006276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	daf2      	bge.n	800622c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <USB_CoreReset+0x64>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d0f0      	beq.n	8006256 <USB_CoreReset+0x36>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	00030d40 	.word	0x00030d40

08006288 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006294:	2010      	movs	r0, #16
 8006296:	f002 f971 	bl	800857c <USBD_static_malloc>
 800629a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32b0      	adds	r2, #176	; 0xb0
 80062ac:	2100      	movs	r1, #0
 80062ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062b2:	2302      	movs	r3, #2
 80062b4:	e048      	b.n	8006348 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	32b0      	adds	r2, #176	; 0xb0
 80062c0:	68f9      	ldr	r1, [r7, #12]
 80062c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	32b0      	adds	r2, #176	; 0xb0
 80062d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7c1b      	ldrb	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80062e2:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <USBD_HID_Init+0xc8>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	3326      	adds	r3, #38	; 0x26
 80062f8:	2207      	movs	r2, #7
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e00c      	b.n	8006318 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <USBD_HID_Init+0xc8>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	3326      	adds	r3, #38	; 0x26
 8006314:	220a      	movs	r2, #10
 8006316:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006318:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <USBD_HID_Init+0xc8>)
 800631a:	7819      	ldrb	r1, [r3, #0]
 800631c:	2308      	movs	r3, #8
 800631e:	2203      	movs	r2, #3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f002 f81a 	bl	800835a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <USBD_HID_Init+0xc8>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	2201      	movs	r2, #1
 800633e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	240000c3 	.word	0x240000c3

08006354 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006360:	4b1f      	ldr	r3, [pc, #124]	; (80063e0 <USBD_HID_DeInit+0x8c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 f81d 	bl	80083a6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <USBD_HID_DeInit+0x8c>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	2200      	movs	r2, #0
 8006384:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <USBD_HID_DeInit+0x8c>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f003 020f 	and.w	r2, r3, #15
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	3326      	adds	r3, #38	; 0x26
 800639c:	2200      	movs	r2, #0
 800639e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	32b0      	adds	r2, #176	; 0xb0
 80063aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d011      	beq.n	80063d6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	32b0      	adds	r2, #176	; 0xb0
 80063bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 f8e9 	bl	8008598 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	; 0xb0
 80063d0:	2100      	movs	r1, #0
 80063d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	240000c3 	.word	0x240000c3

080063e4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32b0      	adds	r2, #176	; 0xb0
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800640c:	2303      	movs	r3, #3
 800640e:	e0e8      	b.n	80065e2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006418:	2b00      	cmp	r3, #0
 800641a:	d046      	beq.n	80064aa <USBD_HID_Setup+0xc6>
 800641c:	2b20      	cmp	r3, #32
 800641e:	f040 80d8 	bne.w	80065d2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	3b02      	subs	r3, #2
 8006428:	2b09      	cmp	r3, #9
 800642a:	d836      	bhi.n	800649a <USBD_HID_Setup+0xb6>
 800642c:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <USBD_HID_Setup+0x50>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	0800648b 	.word	0x0800648b
 8006438:	0800646b 	.word	0x0800646b
 800643c:	0800649b 	.word	0x0800649b
 8006440:	0800649b 	.word	0x0800649b
 8006444:	0800649b 	.word	0x0800649b
 8006448:	0800649b 	.word	0x0800649b
 800644c:	0800649b 	.word	0x0800649b
 8006450:	0800649b 	.word	0x0800649b
 8006454:	08006479 	.word	0x08006479
 8006458:	0800645d 	.word	0x0800645d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]
          break;
 8006468:	e01e      	b.n	80064a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fc05 	bl	8007c80 <USBD_CtlSendData>
          break;
 8006476:	e017      	b.n	80064a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	885b      	ldrh	r3, [r3, #2]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	b29b      	uxth	r3, r3
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	605a      	str	r2, [r3, #4]
          break;
 8006488:	e00e      	b.n	80064a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3304      	adds	r3, #4
 800648e:	2201      	movs	r2, #1
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fbf4 	bl	8007c80 <USBD_CtlSendData>
          break;
 8006498:	e006      	b.n	80064a8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fb7e 	bl	8007b9e <USBD_CtlError>
          ret = USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	75fb      	strb	r3, [r7, #23]
          break;
 80064a6:	bf00      	nop
      }
      break;
 80064a8:	e09a      	b.n	80065e0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b0b      	cmp	r3, #11
 80064b0:	f200 8086 	bhi.w	80065c0 <USBD_HID_Setup+0x1dc>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <USBD_HID_Setup+0xd8>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	080065cf 	.word	0x080065cf
 80064c4:	080065c1 	.word	0x080065c1
 80064c8:	080065c1 	.word	0x080065c1
 80064cc:	080065c1 	.word	0x080065c1
 80064d0:	080065c1 	.word	0x080065c1
 80064d4:	08006517 	.word	0x08006517
 80064d8:	080065c1 	.word	0x080065c1
 80064dc:	080065c1 	.word	0x080065c1
 80064e0:	080065c1 	.word	0x080065c1
 80064e4:	0800656f 	.word	0x0800656f
 80064e8:	08006599 	.word	0x08006599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d107      	bne.n	8006508 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064f8:	f107 030a 	add.w	r3, r7, #10
 80064fc:	2202      	movs	r2, #2
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fbbd 	bl	8007c80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006506:	e063      	b.n	80065d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fb47 	bl	8007b9e <USBD_CtlError>
            ret = USBD_FAIL;
 8006510:	2303      	movs	r3, #3
 8006512:	75fb      	strb	r3, [r7, #23]
          break;
 8006514:	e05c      	b.n	80065d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	885b      	ldrh	r3, [r3, #2]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b22      	cmp	r3, #34	; 0x22
 8006520:	d108      	bne.n	8006534 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b3f      	cmp	r3, #63	; 0x3f
 8006528:	bf28      	it	cs
 800652a:	233f      	movcs	r3, #63	; 0x3f
 800652c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <USBD_HID_Setup+0x208>)
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	e015      	b.n	8006560 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	885b      	ldrh	r3, [r3, #2]
 8006538:	0a1b      	lsrs	r3, r3, #8
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b21      	cmp	r3, #33	; 0x21
 800653e:	d108      	bne.n	8006552 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <USBD_HID_Setup+0x20c>)
 8006542:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	88db      	ldrh	r3, [r3, #6]
 8006548:	2b09      	cmp	r3, #9
 800654a:	bf28      	it	cs
 800654c:	2309      	movcs	r3, #9
 800654e:	82bb      	strh	r3, [r7, #20]
 8006550:	e006      	b.n	8006560 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 fb22 	bl	8007b9e <USBD_CtlError>
            ret = USBD_FAIL;
 800655a:	2303      	movs	r3, #3
 800655c:	75fb      	strb	r3, [r7, #23]
            break;
 800655e:	e037      	b.n	80065d0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006560:	8abb      	ldrh	r3, [r7, #20]
 8006562:	461a      	mov	r2, r3
 8006564:	6939      	ldr	r1, [r7, #16]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fb8a 	bl	8007c80 <USBD_CtlSendData>
          break;
 800656c:	e030      	b.n	80065d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d107      	bne.n	800658a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3308      	adds	r3, #8
 800657e:	2201      	movs	r2, #1
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fb7c 	bl	8007c80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006588:	e022      	b.n	80065d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fb06 	bl	8007b9e <USBD_CtlError>
            ret = USBD_FAIL;
 8006592:	2303      	movs	r3, #3
 8006594:	75fb      	strb	r3, [r7, #23]
          break;
 8006596:	e01b      	b.n	80065d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d106      	bne.n	80065b2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	885b      	ldrh	r3, [r3, #2]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065b0:	e00e      	b.n	80065d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 faf2 	bl	8007b9e <USBD_CtlError>
            ret = USBD_FAIL;
 80065ba:	2303      	movs	r3, #3
 80065bc:	75fb      	strb	r3, [r7, #23]
          break;
 80065be:	e007      	b.n	80065d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 faeb 	bl	8007b9e <USBD_CtlError>
          ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	75fb      	strb	r3, [r7, #23]
          break;
 80065cc:	e000      	b.n	80065d0 <USBD_HID_Setup+0x1ec>
          break;
 80065ce:	bf00      	nop
      }
      break;
 80065d0:	e006      	b.n	80065e0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fae2 	bl	8007b9e <USBD_CtlError>
      ret = USBD_FAIL;
 80065da:	2303      	movs	r3, #3
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	bf00      	nop
  }

  return (uint8_t)ret;
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	24000084 	.word	0x24000084
 80065f0:	2400006c 	.word	0x2400006c

080065f4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	32b0      	adds	r2, #176	; 0xb0
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006610:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	e014      	b.n	8006646 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d10d      	bne.n	8006644 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	7b1b      	ldrb	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2201      	movs	r2, #1
 8006634:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <USBD_HID_SendReport+0x5c>)
 8006638:	7819      	ldrb	r1, [r3, #0]
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f001 ff59 	bl	80084f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	240000c3 	.word	0x240000c3

08006654 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800665c:	2181      	movs	r1, #129	; 0x81
 800665e:	4809      	ldr	r0, [pc, #36]	; (8006684 <USBD_HID_GetFSCfgDesc+0x30>)
 8006660:	f000 fc3b 	bl	8006eda <USBD_GetEpDesc>
 8006664:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	220a      	movs	r2, #10
 8006670:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2222      	movs	r2, #34	; 0x22
 8006676:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	24000048 	.word	0x24000048

08006688 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006690:	2181      	movs	r1, #129	; 0x81
 8006692:	4809      	ldr	r0, [pc, #36]	; (80066b8 <USBD_HID_GetHSCfgDesc+0x30>)
 8006694:	f000 fc21 	bl	8006eda <USBD_GetEpDesc>
 8006698:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2207      	movs	r2, #7
 80066a4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2222      	movs	r2, #34	; 0x22
 80066aa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	24000048 	.word	0x24000048

080066bc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80066c4:	2181      	movs	r1, #129	; 0x81
 80066c6:	4809      	ldr	r0, [pc, #36]	; (80066ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80066c8:	f000 fc07 	bl	8006eda <USBD_GetEpDesc>
 80066cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	220a      	movs	r2, #10
 80066d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2222      	movs	r2, #34	; 0x22
 80066de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	24000048 	.word	0x24000048

080066f0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32b0      	adds	r2, #176	; 0xb0
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	2200      	movs	r2, #0
 800670c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	220a      	movs	r2, #10
 8006728:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800672a:	4b03      	ldr	r3, [pc, #12]	; (8006738 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	24000078 	.word	0x24000078

0800673c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	e01f      	b.n	8006794 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	79fa      	ldrb	r2, [r7, #7]
 8006786:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f001 fd7b 	bl	8008284 <USBD_LL_Init>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e025      	b.n	8006800 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32ae      	adds	r2, #174	; 0xae
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00f      	beq.n	80067f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32ae      	adds	r2, #174	; 0xae
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	f107 020e 	add.w	r2, r7, #14
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	4602      	mov	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fd87 	bl	8008324 <USBD_LL_Start>
 8006816:	4603      	mov	r3, r0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	4611      	mov	r1, r2
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 f938 	bl	8007b2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d01a      	beq.n	8006914 <USBD_LL_SetupStage+0x72>
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d822      	bhi.n	8006928 <USBD_LL_SetupStage+0x86>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <USBD_LL_SetupStage+0x4a>
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d00a      	beq.n	8006900 <USBD_LL_SetupStage+0x5e>
 80068ea:	e01d      	b.n	8006928 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb65 	bl	8006fc4 <USBD_StdDevReq>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
      break;
 80068fe:	e020      	b.n	8006942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fbcd 	bl	80070a8 <USBD_StdItfReq>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
      break;
 8006912:	e016      	b.n	8006942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc2f 	bl	8007180 <USBD_StdEPReq>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	e00c      	b.n	8006942 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800692e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fd54 	bl	80083e4 <USBD_LL_StallEP>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	bf00      	nop
  }

  return ret;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	460b      	mov	r3, r1
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d16e      	bne.n	8006a42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800696a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006972:	2b03      	cmp	r3, #3
 8006974:	f040 8098 	bne.w	8006aa8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d913      	bls.n	80069ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	1ad2      	subs	r2, r2, r3
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	4293      	cmp	r3, r2
 800699c:	bf28      	it	cs
 800699e:	4613      	movcs	r3, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f001 f997 	bl	8007cd8 <USBD_CtlContinueRx>
 80069aa:	e07d      	b.n	8006aa8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d014      	beq.n	80069e4 <USBD_LL_DataOutStage+0x98>
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d81d      	bhi.n	80069fa <USBD_LL_DataOutStage+0xae>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <USBD_LL_DataOutStage+0x7c>
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d003      	beq.n	80069ce <USBD_LL_DataOutStage+0x82>
 80069c6:	e018      	b.n	80069fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	75bb      	strb	r3, [r7, #22]
            break;
 80069cc:	e018      	b.n	8006a00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fa64 	bl	8006ea6 <USBD_CoreFindIF>
 80069de:	4603      	mov	r3, r0
 80069e0:	75bb      	strb	r3, [r7, #22]
            break;
 80069e2:	e00d      	b.n	8006a00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fa66 	bl	8006ec0 <USBD_CoreFindEP>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75bb      	strb	r3, [r7, #22]
            break;
 80069f8:	e002      	b.n	8006a00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75bb      	strb	r3, [r7, #22]
            break;
 80069fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a00:	7dbb      	ldrb	r3, [r7, #22]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d113      	bne.n	8006a3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a12:	7dba      	ldrb	r2, [r7, #22]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	32ae      	adds	r2, #174	; 0xae
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a22:	7dba      	ldrb	r2, [r7, #22]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a2a:	7dba      	ldrb	r2, [r7, #22]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	32ae      	adds	r2, #174	; 0xae
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 f95d 	bl	8007cfa <USBD_CtlSendStatus>
 8006a40:	e032      	b.n	8006aa8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fa37 	bl	8006ec0 <USBD_CoreFindEP>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a56:	7dbb      	ldrb	r3, [r7, #22]
 8006a58:	2bff      	cmp	r3, #255	; 0xff
 8006a5a:	d025      	beq.n	8006aa8 <USBD_LL_DataOutStage+0x15c>
 8006a5c:	7dbb      	ldrb	r3, [r7, #22]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d122      	bne.n	8006aa8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d117      	bne.n	8006a9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	32ae      	adds	r2, #174	; 0xae
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00f      	beq.n	8006a9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a7e:	7dba      	ldrb	r2, [r7, #22]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a86:	7dba      	ldrb	r2, [r7, #22]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	32ae      	adds	r2, #174	; 0xae
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	7afa      	ldrb	r2, [r7, #11]
 8006a94:	4611      	mov	r1, r2
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	4798      	blx	r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	e000      	b.n	8006aaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	460b      	mov	r3, r1
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d16f      	bne.n	8006ba6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3314      	adds	r3, #20
 8006aca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d15a      	bne.n	8006b8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d914      	bls.n	8006b0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f001 f8dc 	bl	8007cb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006afe:	2300      	movs	r3, #0
 8006b00:	2200      	movs	r2, #0
 8006b02:	2100      	movs	r1, #0
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fd17 	bl	8008538 <USBD_LL_PrepareReceive>
 8006b0a:	e03f      	b.n	8006b8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d11c      	bne.n	8006b52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d316      	bcc.n	8006b52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d20f      	bcs.n	8006b52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b32:	2200      	movs	r2, #0
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f001 f8bd 	bl	8007cb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b44:	2300      	movs	r3, #0
 8006b46:	2200      	movs	r2, #0
 8006b48:	2100      	movs	r1, #0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f001 fcf4 	bl	8008538 <USBD_LL_PrepareReceive>
 8006b50:	e01c      	b.n	8006b8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d10f      	bne.n	8006b7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fc2f 	bl	80083e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f001 f8ca 	bl	8007d20 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d03a      	beq.n	8006c0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fe42 	bl	8006820 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ba4:	e032      	b.n	8006c0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f985 	bl	8006ec0 <USBD_CoreFindEP>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d025      	beq.n	8006c0c <USBD_LL_DataInStage+0x15a>
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d122      	bne.n	8006c0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d11c      	bne.n	8006c0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bd2:	7dfa      	ldrb	r2, [r7, #23]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	32ae      	adds	r2, #174	; 0xae
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d014      	beq.n	8006c0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006be2:	7dfa      	ldrb	r2, [r7, #23]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bea:	7dfa      	ldrb	r2, [r7, #23]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	32ae      	adds	r2, #174	; 0xae
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	7afa      	ldrb	r2, [r7, #11]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c02:	7dbb      	ldrb	r3, [r7, #22]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c08:	7dbb      	ldrb	r3, [r7, #22]
 8006c0a:	e000      	b.n	8006c0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00e      	beq.n	8006c7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6852      	ldr	r2, [r2, #4]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fb69 	bl	800835a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2240      	movs	r2, #64	; 0x40
 8006c94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fb5b 	bl	800835a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2240      	movs	r2, #64	; 0x40
 8006cae:	621a      	str	r2, [r3, #32]

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d006      	beq.n	8006cfc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2204      	movs	r2, #4
 8006d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d106      	bne.n	8006d34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d110      	bne.n	8006d78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32ae      	adds	r2, #174	; 0xae
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e01c      	b.n	8006dde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d115      	bne.n	8006ddc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e01c      	b.n	8006e42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d115      	bne.n	8006e40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32ae      	adds	r2, #174	; 0xae
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	; 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00e      	beq.n	8006e9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ecc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d920      	bls.n	8006f44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f0a:	e013      	b.n	8006f34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f0c:	f107 030a 	add.w	r3, r7, #10
 8006f10:	4619      	mov	r1, r3
 8006f12:	6978      	ldr	r0, [r7, #20]
 8006f14:	f000 f81b 	bl	8006f4e <USBD_GetNextDesc>
 8006f18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d108      	bne.n	8006f34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	789b      	ldrb	r3, [r3, #2]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d008      	beq.n	8006f42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	885b      	ldrh	r3, [r3, #2]
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	897b      	ldrh	r3, [r7, #10]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d8e5      	bhi.n	8006f0c <USBD_GetEpDesc+0x32>
 8006f40:	e000      	b.n	8006f44 <USBD_GetEpDesc+0x6a>
          break;
 8006f42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f44:	693b      	ldr	r3, [r7, #16]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fa6:	8a3b      	ldrh	r3, [r7, #16]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	b21a      	sxth	r2, r3
 8006fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b21b      	sxth	r3, r3
 8006fb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d005      	beq.n	8006fea <USBD_StdDevReq+0x26>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d857      	bhi.n	8007092 <USBD_StdDevReq+0xce>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USBD_StdDevReq+0x42>
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d153      	bne.n	8007092 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	32ae      	adds	r2, #174	; 0xae
 8006ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]
      break;
 8007004:	e04a      	b.n	800709c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b09      	cmp	r3, #9
 800700c:	d83b      	bhi.n	8007086 <USBD_StdDevReq+0xc2>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBD_StdDevReq+0x50>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007069 	.word	0x08007069
 8007018:	0800707d 	.word	0x0800707d
 800701c:	08007087 	.word	0x08007087
 8007020:	08007073 	.word	0x08007073
 8007024:	08007087 	.word	0x08007087
 8007028:	08007047 	.word	0x08007047
 800702c:	0800703d 	.word	0x0800703d
 8007030:	08007087 	.word	0x08007087
 8007034:	0800705f 	.word	0x0800705f
 8007038:	08007051 	.word	0x08007051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa3c 	bl	80074bc <USBD_GetDescriptor>
          break;
 8007044:	e024      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fbcb 	bl	80077e4 <USBD_SetAddress>
          break;
 800704e:	e01f      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fc0a 	bl	800786c <USBD_SetConfig>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]
          break;
 800705c:	e018      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fcad 	bl	80079c0 <USBD_GetConfig>
          break;
 8007066:	e013      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fcde 	bl	8007a2c <USBD_GetStatus>
          break;
 8007070:	e00e      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd0d 	bl	8007a94 <USBD_SetFeature>
          break;
 800707a:	e009      	b.n	8007090 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fd31 	bl	8007ae6 <USBD_ClrFeature>
          break;
 8007084:	e004      	b.n	8007090 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fd88 	bl	8007b9e <USBD_CtlError>
          break;
 800708e:	bf00      	nop
      }
      break;
 8007090:	e004      	b.n	800709c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fd82 	bl	8007b9e <USBD_CtlError>
      break;
 800709a:	bf00      	nop
  }

  return ret;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop

080070a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d005      	beq.n	80070ce <USBD_StdItfReq+0x26>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d852      	bhi.n	800716c <USBD_StdItfReq+0xc4>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <USBD_StdItfReq+0x26>
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d14e      	bne.n	800716c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d840      	bhi.n	800715e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	889b      	ldrh	r3, [r3, #4]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d836      	bhi.n	8007154 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	889b      	ldrh	r3, [r3, #4]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff fed9 	bl	8006ea6 <USBD_CoreFindIF>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	d01d      	beq.n	800713a <USBD_StdItfReq+0x92>
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11a      	bne.n	800713a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007104:	7bba      	ldrb	r2, [r7, #14]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32ae      	adds	r2, #174	; 0xae
 800710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00f      	beq.n	8007134 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007114:	7bba      	ldrb	r2, [r7, #14]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800711c:	7bba      	ldrb	r2, [r7, #14]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32ae      	adds	r2, #174	; 0xae
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007132:	e004      	b.n	800713e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007138:	e001      	b.n	800713e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800713a:	2303      	movs	r3, #3
 800713c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	88db      	ldrh	r3, [r3, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d110      	bne.n	8007168 <USBD_StdItfReq+0xc0>
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10d      	bne.n	8007168 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fdd4 	bl	8007cfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007152:	e009      	b.n	8007168 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fd21 	bl	8007b9e <USBD_CtlError>
          break;
 800715c:	e004      	b.n	8007168 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fd1c 	bl	8007b9e <USBD_CtlError>
          break;
 8007166:	e000      	b.n	800716a <USBD_StdItfReq+0xc2>
          break;
 8007168:	bf00      	nop
      }
      break;
 800716a:	e004      	b.n	8007176 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fd15 	bl	8007b9e <USBD_CtlError>
      break;
 8007174:	bf00      	nop
  }

  return ret;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	889b      	ldrh	r3, [r3, #4]
 8007192:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d007      	beq.n	80071b0 <USBD_StdEPReq+0x30>
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	f200 817f 	bhi.w	80074a4 <USBD_StdEPReq+0x324>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d02a      	beq.n	8007200 <USBD_StdEPReq+0x80>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	f040 817a 	bne.w	80074a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fe83 	bl	8006ec0 <USBD_CoreFindEP>
 80071ba:	4603      	mov	r3, r0
 80071bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071be:	7b7b      	ldrb	r3, [r7, #13]
 80071c0:	2bff      	cmp	r3, #255	; 0xff
 80071c2:	f000 8174 	beq.w	80074ae <USBD_StdEPReq+0x32e>
 80071c6:	7b7b      	ldrb	r3, [r7, #13]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f040 8170 	bne.w	80074ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071ce:	7b7a      	ldrb	r2, [r7, #13]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071d6:	7b7a      	ldrb	r2, [r7, #13]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	32ae      	adds	r2, #174	; 0xae
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8163 	beq.w	80074ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071e8:	7b7a      	ldrb	r2, [r7, #13]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32ae      	adds	r2, #174	; 0xae
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071fe:	e156      	b.n	80074ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b03      	cmp	r3, #3
 8007206:	d008      	beq.n	800721a <USBD_StdEPReq+0x9a>
 8007208:	2b03      	cmp	r3, #3
 800720a:	f300 8145 	bgt.w	8007498 <USBD_StdEPReq+0x318>
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 809b 	beq.w	800734a <USBD_StdEPReq+0x1ca>
 8007214:	2b01      	cmp	r3, #1
 8007216:	d03c      	beq.n	8007292 <USBD_StdEPReq+0x112>
 8007218:	e13e      	b.n	8007498 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d002      	beq.n	800722c <USBD_StdEPReq+0xac>
 8007226:	2b03      	cmp	r3, #3
 8007228:	d016      	beq.n	8007258 <USBD_StdEPReq+0xd8>
 800722a:	e02c      	b.n	8007286 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <USBD_StdEPReq+0xce>
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d00a      	beq.n	800724e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f8d1 	bl	80083e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f8cd 	bl	80083e4 <USBD_LL_StallEP>
 800724a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800724c:	e020      	b.n	8007290 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fca4 	bl	8007b9e <USBD_CtlError>
              break;
 8007256:	e01b      	b.n	8007290 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	885b      	ldrh	r3, [r3, #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <USBD_StdEPReq+0xfe>
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d008      	beq.n	800727e <USBD_StdEPReq+0xfe>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f8b3 	bl	80083e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fd3b 	bl	8007cfa <USBD_CtlSendStatus>

              break;
 8007284:	e004      	b.n	8007290 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc88 	bl	8007b9e <USBD_CtlError>
              break;
 800728e:	bf00      	nop
          }
          break;
 8007290:	e107      	b.n	80074a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d002      	beq.n	80072a4 <USBD_StdEPReq+0x124>
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d016      	beq.n	80072d0 <USBD_StdEPReq+0x150>
 80072a2:	e04b      	b.n	800733c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <USBD_StdEPReq+0x146>
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d00a      	beq.n	80072c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f895 	bl	80083e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f891 	bl	80083e4 <USBD_LL_StallEP>
 80072c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c4:	e040      	b.n	8007348 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc68 	bl	8007b9e <USBD_CtlError>
              break;
 80072ce:	e03b      	b.n	8007348 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	885b      	ldrh	r3, [r3, #2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d136      	bne.n	8007346 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f89b 	bl	8008422 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd04 	bl	8007cfa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fde2 	bl	8006ec0 <USBD_CoreFindEP>
 80072fc:	4603      	mov	r3, r0
 80072fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007300:	7b7b      	ldrb	r3, [r7, #13]
 8007302:	2bff      	cmp	r3, #255	; 0xff
 8007304:	d01f      	beq.n	8007346 <USBD_StdEPReq+0x1c6>
 8007306:	7b7b      	ldrb	r3, [r7, #13]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d11c      	bne.n	8007346 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800730c:	7b7a      	ldrb	r2, [r7, #13]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007314:	7b7a      	ldrb	r2, [r7, #13]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32ae      	adds	r2, #174	; 0xae
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007324:	7b7a      	ldrb	r2, [r7, #13]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32ae      	adds	r2, #174	; 0xae
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800733a:	e004      	b.n	8007346 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fc2d 	bl	8007b9e <USBD_CtlError>
              break;
 8007344:	e000      	b.n	8007348 <USBD_StdEPReq+0x1c8>
              break;
 8007346:	bf00      	nop
          }
          break;
 8007348:	e0ab      	b.n	80074a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d002      	beq.n	800735c <USBD_StdEPReq+0x1dc>
 8007356:	2b03      	cmp	r3, #3
 8007358:	d032      	beq.n	80073c0 <USBD_StdEPReq+0x240>
 800735a:	e097      	b.n	800748c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <USBD_StdEPReq+0x1f2>
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d004      	beq.n	8007372 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fc17 	bl	8007b9e <USBD_CtlError>
                break;
 8007370:	e091      	b.n	8007496 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007376:	2b00      	cmp	r3, #0
 8007378:	da0b      	bge.n	8007392 <USBD_StdEPReq+0x212>
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	3310      	adds	r3, #16
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	3304      	adds	r3, #4
 8007390:	e00b      	b.n	80073aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2202      	movs	r2, #2
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc61 	bl	8007c80 <USBD_CtlSendData>
              break;
 80073be:	e06a      	b.n	8007496 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	da11      	bge.n	80073ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	f003 020f 	and.w	r2, r3, #15
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	3324      	adds	r3, #36	; 0x24
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d117      	bne.n	8007412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fbda 	bl	8007b9e <USBD_CtlError>
                  break;
 80073ea:	e054      	b.n	8007496 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	f003 020f 	and.w	r2, r3, #15
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fbc7 	bl	8007b9e <USBD_CtlError>
                  break;
 8007410:	e041      	b.n	8007496 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007416:	2b00      	cmp	r3, #0
 8007418:	da0b      	bge.n	8007432 <USBD_StdEPReq+0x2b2>
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	3310      	adds	r3, #16
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	3304      	adds	r3, #4
 8007430:	e00b      	b.n	800744a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <USBD_StdEPReq+0x2d8>
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d103      	bne.n	8007460 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e00e      	b.n	800747e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fffb 	bl	8008460 <USBD_LL_IsStallEP>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	e002      	b.n	800747e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2202      	movs	r2, #2
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fbfb 	bl	8007c80 <USBD_CtlSendData>
              break;
 800748a:	e004      	b.n	8007496 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fb85 	bl	8007b9e <USBD_CtlError>
              break;
 8007494:	bf00      	nop
          }
          break;
 8007496:	e004      	b.n	80074a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb7f 	bl	8007b9e <USBD_CtlError>
          break;
 80074a0:	bf00      	nop
      }
      break;
 80074a2:	e005      	b.n	80074b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb79 	bl	8007b9e <USBD_CtlError>
      break;
 80074ac:	e000      	b.n	80074b0 <USBD_StdEPReq+0x330>
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	885b      	ldrh	r3, [r3, #2]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	2b0e      	cmp	r3, #14
 80074de:	f200 8152 	bhi.w	8007786 <USBD_GetDescriptor+0x2ca>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <USBD_GetDescriptor+0x2c>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007559 	.word	0x08007559
 80074ec:	08007571 	.word	0x08007571
 80074f0:	080075b1 	.word	0x080075b1
 80074f4:	08007787 	.word	0x08007787
 80074f8:	08007787 	.word	0x08007787
 80074fc:	08007727 	.word	0x08007727
 8007500:	08007753 	.word	0x08007753
 8007504:	08007787 	.word	0x08007787
 8007508:	08007787 	.word	0x08007787
 800750c:	08007787 	.word	0x08007787
 8007510:	08007787 	.word	0x08007787
 8007514:	08007787 	.word	0x08007787
 8007518:	08007787 	.word	0x08007787
 800751c:	08007787 	.word	0x08007787
 8007520:	08007525 	.word	0x08007525
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7c12      	ldrb	r2, [r2, #16]
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007546:	e126      	b.n	8007796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb27 	bl	8007b9e <USBD_CtlError>
        err++;
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	3301      	adds	r3, #1
 8007554:	72fb      	strb	r3, [r7, #11]
      break;
 8007556:	e11e      	b.n	8007796 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
      break;
 800756e:	e112      	b.n	8007796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	7c1b      	ldrb	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10d      	bne.n	8007594 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	f107 0208 	add.w	r2, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007592:	e100      	b.n	8007796 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	f107 0208 	add.w	r2, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	2202      	movs	r2, #2
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e0f2      	b.n	8007796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	885b      	ldrh	r3, [r3, #2]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	f200 80ac 	bhi.w	8007714 <USBD_GetDescriptor+0x258>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_GetDescriptor+0x108>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075dd 	.word	0x080075dd
 80075c8:	08007611 	.word	0x08007611
 80075cc:	08007645 	.word	0x08007645
 80075d0:	08007679 	.word	0x08007679
 80075d4:	080076ad 	.word	0x080076ad
 80075d8:	080076e1 	.word	0x080076e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fe:	e091      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 facb 	bl	8007b9e <USBD_CtlError>
            err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
          break;
 800760e:	e089      	b.n	8007724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	7c12      	ldrb	r2, [r2, #16]
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007632:	e077      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fab1 	bl	8007b9e <USBD_CtlError>
            err++;
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	3301      	adds	r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
          break;
 8007642:	e06f      	b.n	8007724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007666:	e05d      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa97 	bl	8007b9e <USBD_CtlError>
            err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
          break;
 8007676:	e055      	b.n	8007724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e043      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa7d 	bl	8007b9e <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e03b      	b.n	8007724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7c12      	ldrb	r2, [r2, #16]
 80076c4:	f107 0108 	add.w	r1, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ce:	e029      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa63 	bl	8007b9e <USBD_CtlError>
            err++;
 80076d8:	7afb      	ldrb	r3, [r7, #11]
 80076da:	3301      	adds	r3, #1
 80076dc:	72fb      	strb	r3, [r7, #11]
          break;
 80076de:	e021      	b.n	8007724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007702:	e00f      	b.n	8007724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa49 	bl	8007b9e <USBD_CtlError>
            err++;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3301      	adds	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]
          break;
 8007712:	e007      	b.n	8007724 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa41 	bl	8007b9e <USBD_CtlError>
          err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007722:	bf00      	nop
      }
      break;
 8007724:	e037      	b.n	8007796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7c1b      	ldrb	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007736:	f107 0208 	add.w	r2, r7, #8
 800773a:	4610      	mov	r0, r2
 800773c:	4798      	blx	r3
 800773e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007740:	e029      	b.n	8007796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fa2a 	bl	8007b9e <USBD_CtlError>
        err++;
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	3301      	adds	r3, #1
 800774e:	72fb      	strb	r3, [r7, #11]
      break;
 8007750:	e021      	b.n	8007796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7c1b      	ldrb	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10d      	bne.n	8007776 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f107 0208 	add.w	r2, r7, #8
 8007766:	4610      	mov	r0, r2
 8007768:	4798      	blx	r3
 800776a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	2207      	movs	r2, #7
 8007772:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007774:	e00f      	b.n	8007796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa10 	bl	8007b9e <USBD_CtlError>
        err++;
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	3301      	adds	r3, #1
 8007782:	72fb      	strb	r3, [r7, #11]
      break;
 8007784:	e007      	b.n	8007796 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa08 	bl	8007b9e <USBD_CtlError>
      err++;
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	3301      	adds	r3, #1
 8007792:	72fb      	strb	r3, [r7, #11]
      break;
 8007794:	bf00      	nop
  }

  if (err != 0U)
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11e      	bne.n	80077da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d016      	beq.n	80077d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88da      	ldrh	r2, [r3, #6]
 80077ae:	893b      	ldrh	r3, [r7, #8]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	bf28      	it	cs
 80077b4:	4613      	movcs	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077ba:	893b      	ldrh	r3, [r7, #8]
 80077bc:	461a      	mov	r2, r3
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa5d 	bl	8007c80 <USBD_CtlSendData>
 80077c6:	e009      	b.n	80077dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9e7 	bl	8007b9e <USBD_CtlError>
 80077d0:	e004      	b.n	80077dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa91 	bl	8007cfa <USBD_CtlSendStatus>
 80077d8:	e000      	b.n	80077dc <USBD_GetDescriptor+0x320>
    return;
 80077da:	bf00      	nop
  }
}
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	889b      	ldrh	r3, [r3, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d131      	bne.n	800785a <USBD_SetAddress+0x76>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	88db      	ldrh	r3, [r3, #6]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d12d      	bne.n	800785a <USBD_SetAddress+0x76>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	2b7f      	cmp	r3, #127	; 0x7f
 8007804:	d829      	bhi.n	800785a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d104      	bne.n	8007828 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9bc 	bl	8007b9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	e01d      	b.n	8007864 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7bfa      	ldrb	r2, [r7, #15]
 800782c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fe3f 	bl	80084b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa5d 	bl	8007cfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784e:	e009      	b.n	8007864 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007858:	e004      	b.n	8007864 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f99e 	bl	8007b9e <USBD_CtlError>
  }
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	885b      	ldrh	r3, [r3, #2]
 800787e:	b2da      	uxtb	r2, r3
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <USBD_SetConfig+0x150>)
 8007882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007884:	4b4d      	ldr	r3, [pc, #308]	; (80079bc <USBD_SetConfig+0x150>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d905      	bls.n	8007898 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f985 	bl	8007b9e <USBD_CtlError>
    return USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	e08c      	b.n	80079b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d002      	beq.n	80078aa <USBD_SetConfig+0x3e>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d029      	beq.n	80078fc <USBD_SetConfig+0x90>
 80078a8:	e075      	b.n	8007996 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078aa:	4b44      	ldr	r3, [pc, #272]	; (80079bc <USBD_SetConfig+0x150>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d020      	beq.n	80078f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078b2:	4b42      	ldr	r3, [pc, #264]	; (80079bc <USBD_SetConfig+0x150>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078bc:	4b3f      	ldr	r3, [pc, #252]	; (80079bc <USBD_SetConfig+0x150>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fe ffb7 	bl	8006836 <USBD_SetClassConfig>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f962 	bl	8007b9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e2:	e065      	b.n	80079b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa08 	bl	8007cfa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2203      	movs	r2, #3
 80078ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078f2:	e05d      	b.n	80079b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa00 	bl	8007cfa <USBD_CtlSendStatus>
      break;
 80078fa:	e059      	b.n	80079b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078fc:	4b2f      	ldr	r3, [pc, #188]	; (80079bc <USBD_SetConfig+0x150>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d112      	bne.n	800792a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <USBD_SetConfig+0x150>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007916:	4b29      	ldr	r3, [pc, #164]	; (80079bc <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe ffa6 	bl	800686e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9e9 	bl	8007cfa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007928:	e042      	b.n	80079b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800792a:	4b24      	ldr	r3, [pc, #144]	; (80079bc <USBD_SetConfig+0x150>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d02a      	beq.n	800798e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fe ff94 	bl	800686e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007946:	4b1d      	ldr	r3, [pc, #116]	; (80079bc <USBD_SetConfig+0x150>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007950:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <USBD_SetConfig+0x150>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fe ff6d 	bl	8006836 <USBD_SetClassConfig>
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00f      	beq.n	8007986 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f918 	bl	8007b9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fe ff79 	bl	800686e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007984:	e014      	b.n	80079b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9b7 	bl	8007cfa <USBD_CtlSendStatus>
      break;
 800798c:	e010      	b.n	80079b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9b3 	bl	8007cfa <USBD_CtlSendStatus>
      break;
 8007994:	e00c      	b.n	80079b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f900 	bl	8007b9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <USBD_SetConfig+0x150>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe ff62 	bl	800686e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079aa:	2303      	movs	r3, #3
 80079ac:	73fb      	strb	r3, [r7, #15]
      break;
 80079ae:	bf00      	nop
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	24000138 	.word	0x24000138

080079c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d004      	beq.n	80079dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f8e2 	bl	8007b9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079da:	e023      	b.n	8007a24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	dc02      	bgt.n	80079ee <USBD_GetConfig+0x2e>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc03      	bgt.n	80079f4 <USBD_GetConfig+0x34>
 80079ec:	e015      	b.n	8007a1a <USBD_GetConfig+0x5a>
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d00b      	beq.n	8007a0a <USBD_GetConfig+0x4a>
 80079f2:	e012      	b.n	8007a1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3308      	adds	r3, #8
 80079fe:	2201      	movs	r2, #1
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f93c 	bl	8007c80 <USBD_CtlSendData>
        break;
 8007a08:	e00c      	b.n	8007a24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f934 	bl	8007c80 <USBD_CtlSendData>
        break;
 8007a18:	e004      	b.n	8007a24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8be 	bl	8007b9e <USBD_CtlError>
        break;
 8007a22:	bf00      	nop
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d81e      	bhi.n	8007a82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d004      	beq.n	8007a56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8a5 	bl	8007b9e <USBD_CtlError>
        break;
 8007a54:	e01a      	b.n	8007a8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f043 0202 	orr.w	r2, r3, #2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	330c      	adds	r3, #12
 8007a76:	2202      	movs	r2, #2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f900 	bl	8007c80 <USBD_CtlSendData>
      break;
 8007a80:	e004      	b.n	8007a8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f88a 	bl	8007b9e <USBD_CtlError>
      break;
 8007a8a:	bf00      	nop
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	885b      	ldrh	r3, [r3, #2]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d107      	bne.n	8007ab6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f923 	bl	8007cfa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ab4:	e013      	b.n	8007ade <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d10b      	bne.n	8007ad6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	889b      	ldrh	r3, [r3, #4]
 8007ac2:	0a1b      	lsrs	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f913 	bl	8007cfa <USBD_CtlSendStatus>
}
 8007ad4:	e003      	b.n	8007ade <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f860 	bl	8007b9e <USBD_CtlError>
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d80b      	bhi.n	8007b16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d10c      	bne.n	8007b20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8f3 	bl	8007cfa <USBD_CtlSendStatus>
      }
      break;
 8007b14:	e004      	b.n	8007b20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f840 	bl	8007b9e <USBD_CtlError>
      break;
 8007b1e:	e000      	b.n	8007b22 <USBD_ClrFeature+0x3c>
      break;
 8007b20:	bf00      	nop
  }
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7ff fa17 	bl	8006f88 <SWAPBYTE>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fa0a 	bl	8006f88 <SWAPBYTE>
 8007b74:	4603      	mov	r3, r0
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff f9fd 	bl	8006f88 <SWAPBYTE>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	461a      	mov	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	80da      	strh	r2, [r3, #6]
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ba8:	2180      	movs	r1, #128	; 0x80
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fc1a 	bl	80083e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc16 	bl	80083e4 <USBD_LL_StallEP>
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d036      	beq.n	8007c44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bda:	6938      	ldr	r0, [r7, #16]
 8007bdc:	f000 f836 	bl	8007c4c <USBD_GetLen>
 8007be0:	4603      	mov	r3, r0
 8007be2:	3301      	adds	r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	4413      	add	r3, r2
 8007c06:	2203      	movs	r2, #3
 8007c08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c10:	e013      	b.n	8007c3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4413      	add	r3, r2
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	7812      	ldrb	r2, [r2, #0]
 8007c1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	3301      	adds	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
    idx++;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	3301      	adds	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	4413      	add	r3, r2
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	3301      	adds	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e7      	bne.n	8007c12 <USBD_GetString+0x52>
 8007c42:	e000      	b.n	8007c46 <USBD_GetString+0x86>
    return;
 8007c44:	bf00      	nop
  }
}
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c5c:	e005      	b.n	8007c6a <USBD_GetLen+0x1e>
  {
    len++;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	3301      	adds	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f5      	bne.n	8007c5e <USBD_GetLen+0x12>
  }

  return len;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fc25 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fc14 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fc24 	bl	8008538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fbf0 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d30:	2300      	movs	r3, #0
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fbfe 	bl	8008538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	490f      	ldr	r1, [pc, #60]	; (8007d8c <MX_USB_DEVICE_Init+0x44>)
 8007d50:	480f      	ldr	r0, [pc, #60]	; (8007d90 <MX_USB_DEVICE_Init+0x48>)
 8007d52:	f7fe fcf3 	bl	800673c <USBD_Init>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d5c:	f7f8 fc0e 	bl	800057c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007d60:	490c      	ldr	r1, [pc, #48]	; (8007d94 <MX_USB_DEVICE_Init+0x4c>)
 8007d62:	480b      	ldr	r0, [pc, #44]	; (8007d90 <MX_USB_DEVICE_Init+0x48>)
 8007d64:	f7fe fd1a 	bl	800679c <USBD_RegisterClass>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d6e:	f7f8 fc05 	bl	800057c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d72:	4807      	ldr	r0, [pc, #28]	; (8007d90 <MX_USB_DEVICE_Init+0x48>)
 8007d74:	f7fe fd48 	bl	8006808 <USBD_Start>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d7e:	f7f8 fbfd 	bl	800057c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007d82:	f7fa fbf3 	bl	800256c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	240000c4 	.word	0x240000c4
 8007d90:	2400013c 	.word	0x2400013c
 8007d94:	24000010 	.word	0x24000010

08007d98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2212      	movs	r2, #18
 8007da8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007daa:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	240000e4 	.word	0x240000e4

08007dbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007dce:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	240000f8 	.word	0x240000f8

08007de0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	4907      	ldr	r1, [pc, #28]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007df6:	4808      	ldr	r0, [pc, #32]	; (8007e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007df8:	f7ff fee2 	bl	8007bc0 <USBD_GetString>
 8007dfc:	e004      	b.n	8007e08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	4904      	ldr	r1, [pc, #16]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e02:	4805      	ldr	r0, [pc, #20]	; (8007e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e04:	f7ff fedc 	bl	8007bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e08:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	24000418 	.word	0x24000418
 8007e18:	0800867c 	.word	0x0800867c

08007e1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	4904      	ldr	r1, [pc, #16]	; (8007e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e2c:	4804      	ldr	r0, [pc, #16]	; (8007e40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e2e:	f7ff fec7 	bl	8007bc0 <USBD_GetString>
  return USBD_StrDesc;
 8007e32:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	24000418 	.word	0x24000418
 8007e40:	08008688 	.word	0x08008688

08007e44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	221a      	movs	r2, #26
 8007e54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e56:	f000 f843 	bl	8007ee0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e5a:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	240000fc 	.word	0x240000fc

08007e68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4907      	ldr	r1, [pc, #28]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e7e:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e80:	f7ff fe9e 	bl	8007bc0 <USBD_GetString>
 8007e84:	e004      	b.n	8007e90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	4904      	ldr	r1, [pc, #16]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e8a:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e8c:	f7ff fe98 	bl	8007bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	24000418 	.word	0x24000418
 8007ea0:	08008690 	.word	0x08008690

08007ea4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007eba:	4808      	ldr	r0, [pc, #32]	; (8007edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ebc:	f7ff fe80 	bl	8007bc0 <USBD_GetString>
 8007ec0:	e004      	b.n	8007ecc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ec6:	4805      	ldr	r0, [pc, #20]	; (8007edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ec8:	f7ff fe7a 	bl	8007bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	24000418 	.word	0x24000418
 8007edc:	0800869c 	.word	0x0800869c

08007ee0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <Get_SerialNum+0x44>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eec:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <Get_SerialNum+0x48>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <Get_SerialNum+0x4c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4413      	add	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f06:	2208      	movs	r2, #8
 8007f08:	4909      	ldr	r1, [pc, #36]	; (8007f30 <Get_SerialNum+0x50>)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f814 	bl	8007f38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f10:	2204      	movs	r2, #4
 8007f12:	4908      	ldr	r1, [pc, #32]	; (8007f34 <Get_SerialNum+0x54>)
 8007f14:	68b8      	ldr	r0, [r7, #8]
 8007f16:	f000 f80f 	bl	8007f38 <IntToUnicode>
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	1ff1e800 	.word	0x1ff1e800
 8007f28:	1ff1e804 	.word	0x1ff1e804
 8007f2c:	1ff1e808 	.word	0x1ff1e808
 8007f30:	240000fe 	.word	0x240000fe
 8007f34:	2400010e 	.word	0x2400010e

08007f38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
 8007f4e:	e027      	b.n	8007fa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	0f1b      	lsrs	r3, r3, #28
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d80b      	bhi.n	8007f70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	0f1b      	lsrs	r3, r3, #28
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	4619      	mov	r1, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	440b      	add	r3, r1
 8007f68:	3230      	adds	r2, #48	; 0x30
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	e00a      	b.n	8007f86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	0f1b      	lsrs	r3, r3, #28
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	440b      	add	r3, r1
 8007f80:	3237      	adds	r2, #55	; 0x37
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	3301      	adds	r3, #1
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
 8007fa0:	7dfa      	ldrb	r2, [r7, #23]
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3d3      	bcc.n	8007f50 <IntToUnicode+0x18>
  }
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b0ba      	sub	sp, #232	; 0xe8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	609a      	str	r2, [r3, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fd0:	f107 0310 	add.w	r3, r7, #16
 8007fd4:	22c0      	movs	r2, #192	; 0xc0
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fb13 	bl	8008604 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2c      	ldr	r2, [pc, #176]	; (8008094 <HAL_PCD_MspInit+0xdc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d151      	bne.n	800808c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007fe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ffc:	f107 0310 	add.w	r3, r7, #16
 8008000:	4618      	mov	r0, r3
 8008002:	f7fb fa7d 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800800c:	f7f8 fab6 	bl	800057c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008010:	f7fa faac 	bl	800256c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008014:	4b20      	ldr	r3, [pc, #128]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 8008016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800801a:	4a1f      	ldr	r2, [pc, #124]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008024:	4b1c      	ldr	r3, [pc, #112]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 8008026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800803a:	2302      	movs	r3, #2
 800803c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800804c:	230a      	movs	r3, #10
 800804e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008052:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008056:	4619      	mov	r1, r3
 8008058:	4810      	ldr	r0, [pc, #64]	; (800809c <HAL_PCD_MspInit+0xe4>)
 800805a:	f7f8 fde3 	bl	8000c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 8008060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008064:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 8008066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800806a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_PCD_MspInit+0xe0>)
 8008070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	2065      	movs	r0, #101	; 0x65
 8008082:	f7f8 fd1e 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008086:	2065      	movs	r0, #101	; 0x65
 8008088:	f7f8 fd35 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800808c:	bf00      	nop
 800808e:	37e8      	adds	r7, #232	; 0xe8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40080000 	.word	0x40080000
 8008098:	58024400 	.word	0x58024400
 800809c:	58020000 	.word	0x58020000

080080a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe fbf3 	bl	80068a2 <USBD_LL_SetupStage>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	4619      	mov	r1, r3
 80080ee:	f7fe fc2d 	bl	800694c <USBD_LL_DataOutStage>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	3348      	adds	r3, #72	; 0x48
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	4619      	mov	r1, r3
 8008122:	f7fe fcc6 	bl	8006ab2 <USBD_LL_DataInStage>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fe00 	bl	8006d42 <USBD_LL_SOF>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008152:	2301      	movs	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
 8008162:	e008      	b.n	8008176 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d102      	bne.n	8008172 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
 8008170:	e001      	b.n	8008176 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008172:	f7f8 fa03 	bl	800057c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800817c:	7bfa      	ldrb	r2, [r7, #15]
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fd9a 	bl	8006cba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fd42 	bl	8006c16 <USBD_LL_Reset>
}
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fd95 	bl	8006cda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <HAL_PCD_SuspendCallback+0x48>)
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	4a03      	ldr	r2, [pc, #12]	; (80081e4 <HAL_PCD_SuspendCallback+0x48>)
 80081d6:	f043 0306 	orr.w	r3, r3, #6
 80081da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fd8b 	bl	8006d12 <USBD_LL_Resume>
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fde3 	bl	8006de6 <USBD_LL_IsoOUTIncomplete>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fd9f 	bl	8006d82 <USBD_LL_IsoINIncomplete>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fdf5 	bl	8006e4a <USBD_LL_DevConnected>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fdf2 	bl	8006e60 <USBD_LL_DevDisconnected>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d13e      	bne.n	8008312 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008294:	4a21      	ldr	r2, [pc, #132]	; (800831c <USBD_LL_Init+0x98>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a1f      	ldr	r2, [pc, #124]	; (800831c <USBD_LL_Init+0x98>)
 80082a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082a4:	4b1d      	ldr	r3, [pc, #116]	; (800831c <USBD_LL_Init+0x98>)
 80082a6:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <USBD_LL_Init+0x9c>)
 80082a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80082aa:	4b1c      	ldr	r3, [pc, #112]	; (800831c <USBD_LL_Init+0x98>)
 80082ac:	2209      	movs	r2, #9
 80082ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082b0:	4b1a      	ldr	r3, [pc, #104]	; (800831c <USBD_LL_Init+0x98>)
 80082b2:	2202      	movs	r2, #2
 80082b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082b6:	4b19      	ldr	r3, [pc, #100]	; (800831c <USBD_LL_Init+0x98>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082bc:	4b17      	ldr	r3, [pc, #92]	; (800831c <USBD_LL_Init+0x98>)
 80082be:	2202      	movs	r2, #2
 80082c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <USBD_LL_Init+0x98>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082c8:	4b14      	ldr	r3, [pc, #80]	; (800831c <USBD_LL_Init+0x98>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <USBD_LL_Init+0x98>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80082d4:	4b11      	ldr	r3, [pc, #68]	; (800831c <USBD_LL_Init+0x98>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <USBD_LL_Init+0x98>)
 80082dc:	2200      	movs	r2, #0
 80082de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082e0:	4b0e      	ldr	r3, [pc, #56]	; (800831c <USBD_LL_Init+0x98>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082e6:	480d      	ldr	r0, [pc, #52]	; (800831c <USBD_LL_Init+0x98>)
 80082e8:	f7f8 fe64 	bl	8000fb4 <HAL_PCD_Init>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80082f2:	f7f8 f943 	bl	800057c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082f6:	2180      	movs	r1, #128	; 0x80
 80082f8:	4808      	ldr	r0, [pc, #32]	; (800831c <USBD_LL_Init+0x98>)
 80082fa:	f7fa f8bc 	bl	8002476 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082fe:	2240      	movs	r2, #64	; 0x40
 8008300:	2100      	movs	r1, #0
 8008302:	4806      	ldr	r0, [pc, #24]	; (800831c <USBD_LL_Init+0x98>)
 8008304:	f7fa f870 	bl	80023e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008308:	2280      	movs	r2, #128	; 0x80
 800830a:	2101      	movs	r1, #1
 800830c:	4803      	ldr	r0, [pc, #12]	; (800831c <USBD_LL_Init+0x98>)
 800830e:	f7fa f86b 	bl	80023e8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	24000618 	.word	0x24000618
 8008320:	40080000 	.word	0x40080000

08008324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800833a:	4618      	mov	r0, r3
 800833c:	f7f8 ff5e 	bl	80011fc <HAL_PCD_Start>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f930 	bl	80085ac <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	461a      	mov	r2, r3
 8008368:	4603      	mov	r3, r0
 800836a:	70fb      	strb	r3, [r7, #3]
 800836c:	460b      	mov	r3, r1
 800836e:	70bb      	strb	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008382:	78bb      	ldrb	r3, [r7, #2]
 8008384:	883a      	ldrh	r2, [r7, #0]
 8008386:	78f9      	ldrb	r1, [r7, #3]
 8008388:	f7f9 fc5e 	bl	8001c48 <HAL_PCD_EP_Open>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f90a 	bl	80085ac <USBD_Get_USB_Status>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839c:	7bbb      	ldrb	r3, [r7, #14]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7f9 fca7 	bl	8001d18 <HAL_PCD_EP_Close>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 f8eb 	bl	80085ac <USBD_Get_USB_Status>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083da:	7bbb      	ldrb	r3, [r7, #14]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7f9 fd49 	bl	8001e9a <HAL_PCD_EP_SetStall>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f8cc 	bl	80085ac <USBD_Get_USB_Status>
 8008414:	4603      	mov	r3, r0
 8008416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008418:	7bbb      	ldrb	r3, [r7, #14]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7f9 fd8e 	bl	8001f62 <HAL_PCD_EP_ClrStall>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f8ad 	bl	80085ac <USBD_Get_USB_Status>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008456:	7bbb      	ldrb	r3, [r7, #14]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008478:	2b00      	cmp	r3, #0
 800847a:	da0b      	bge.n	8008494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	4613      	mov	r3, r2
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	333e      	adds	r3, #62	; 0x3e
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	e00b      	b.n	80084ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849a:	68f9      	ldr	r1, [r7, #12]
 800849c:	4613      	mov	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80084aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7f9 fb91 	bl	8001bfe <HAL_PCD_SetAddress>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f862 	bl	80085ac <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	460b      	mov	r3, r1
 8008504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008514:	7af9      	ldrb	r1, [r7, #11]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f7f9 fc83 	bl	8001e24 <HAL_PCD_EP_Transmit>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f841 	bl	80085ac <USBD_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800852e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	460b      	mov	r3, r1
 8008546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008556:	7af9      	ldrb	r1, [r7, #11]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	f7f9 fc26 	bl	8001dac <HAL_PCD_EP_Receive>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f820 	bl	80085ac <USBD_Get_USB_Status>
 800856c:	4603      	mov	r3, r0
 800856e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008570:	7dbb      	ldrb	r3, [r7, #22]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008584:	4b03      	ldr	r3, [pc, #12]	; (8008594 <USBD_static_malloc+0x18>)
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	24000b24 	.word	0x24000b24

08008598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d817      	bhi.n	80085f0 <USBD_Get_USB_Status+0x44>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBD_Get_USB_Status+0x1c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085df 	.word	0x080085df
 80085d0:	080085e5 	.word	0x080085e5
 80085d4:	080085eb 	.word	0x080085eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
    break;
 80085dc:	e00b      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085de:	2303      	movs	r3, #3
 80085e0:	73fb      	strb	r3, [r7, #15]
    break;
 80085e2:	e008      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e005      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e002      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	bf00      	nop
  }
  return usb_status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <memset>:
 8008604:	4402      	add	r2, r0
 8008606:	4603      	mov	r3, r0
 8008608:	4293      	cmp	r3, r2
 800860a:	d100      	bne.n	800860e <memset+0xa>
 800860c:	4770      	bx	lr
 800860e:	f803 1b01 	strb.w	r1, [r3], #1
 8008612:	e7f9      	b.n	8008608 <memset+0x4>

08008614 <__libc_init_array>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	4d0d      	ldr	r5, [pc, #52]	; (800864c <__libc_init_array+0x38>)
 8008618:	4c0d      	ldr	r4, [pc, #52]	; (8008650 <__libc_init_array+0x3c>)
 800861a:	1b64      	subs	r4, r4, r5
 800861c:	10a4      	asrs	r4, r4, #2
 800861e:	2600      	movs	r6, #0
 8008620:	42a6      	cmp	r6, r4
 8008622:	d109      	bne.n	8008638 <__libc_init_array+0x24>
 8008624:	4d0b      	ldr	r5, [pc, #44]	; (8008654 <__libc_init_array+0x40>)
 8008626:	4c0c      	ldr	r4, [pc, #48]	; (8008658 <__libc_init_array+0x44>)
 8008628:	f000 f818 	bl	800865c <_init>
 800862c:	1b64      	subs	r4, r4, r5
 800862e:	10a4      	asrs	r4, r4, #2
 8008630:	2600      	movs	r6, #0
 8008632:	42a6      	cmp	r6, r4
 8008634:	d105      	bne.n	8008642 <__libc_init_array+0x2e>
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	f855 3b04 	ldr.w	r3, [r5], #4
 800863c:	4798      	blx	r3
 800863e:	3601      	adds	r6, #1
 8008640:	e7ee      	b.n	8008620 <__libc_init_array+0xc>
 8008642:	f855 3b04 	ldr.w	r3, [r5], #4
 8008646:	4798      	blx	r3
 8008648:	3601      	adds	r6, #1
 800864a:	e7f2      	b.n	8008632 <__libc_init_array+0x1e>
 800864c:	080086bc 	.word	0x080086bc
 8008650:	080086bc 	.word	0x080086bc
 8008654:	080086bc 	.word	0x080086bc
 8008658:	080086c0 	.word	0x080086c0

0800865c <_init>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	bf00      	nop
 8008660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008662:	bc08      	pop	{r3}
 8008664:	469e      	mov	lr, r3
 8008666:	4770      	bx	lr

08008668 <_fini>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr
